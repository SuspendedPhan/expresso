---
Evaluation Pseudocode
---

# Assuming these functions are defined:
# - CreatePropertyInstancePath
# - CreateExObjectInstancePath
# - CreateComponentInstancePath
# - CreateCloneCountPropertyInstancePath
# - AppendInstancePath

function EvaluateProject(project):
    results = empty dictionary
    exObjectInstancePaths = empty dictionary  # New mapping
    for each rootExObject in project.exObjects:
        EvaluateExObject(rootExObject, results, [], exObjectInstancePaths)
    return results

function EvaluateExObject(exObject, results, parentExObjectInstancePath, exObjectInstancePaths):
    cloneCount = EvaluateCloneCount(exObject, results)
    cloneCountPropertyInstancePath = CreateCloneCountPropertyInstancePath(parentExObjectInstancePath, exObject)
    results[cloneCountPropertyInstancePath] = cloneCount
    for cloneNumber from 1 to cloneCount:
        currentPath = CreateExObjectInstancePath(parentExObjectInstancePath, exObject, cloneNumber)
        exObjectInstance = (exObject, cloneNumber)
        exObjectInstancePaths[exObjectInstance] = currentPath  # Store instance path
        evaluationContext = {
            currentInstancePath: currentPath,
            currentExObjectInstance: exObjectInstance,
            exObjectInstancePaths: exObjectInstancePaths
        }
        if exObject has component:
            currentPath = AppendInstancePath(currentPath, CreateComponentInstancePath(exObject.component))
            evaluationContext.currentInstancePath = currentPath
        for each property in exObject.properties:
            EvaluateProperty(exObject, property, results, evaluationContext)
        EvalComponentParameters(exObject, results, evaluationContext)
        EvaluateChildExObjects(exObject, results, currentPath, exObjectInstancePaths)

function EvaluateProperty(exObject, property, results, evaluationContext):
    propertyInstancePath = CreatePropertyInstancePath(evaluationContext.currentInstancePath, property)
    value = results[propertyInstancePath] ?? EvaluateExpr(property.expr, results, evaluationContext)
    results[propertyInstancePath] = value

function EvalComponentParameters(exObject, results, evaluationContext):
    for each componentParameterProperty in exObject.properties:
        componentParam = correspondingComponentParameter(exObject.component, componentParameterProperty)
        propertyInstancePath = CreatePropertyInstancePath(evaluationContext.currentInstancePath, componentParameterProperty)
        value = results[propertyInstancePath]
        componentParamInstancePath = CreatePropertyInstancePath(evaluationContext.currentInstancePath, componentParam)
        results[componentParamInstancePath] = value

function EvaluateChildExObjects(exObject, results, currentPath, exObjectInstancePaths):
    for each childExObject in exObject.children:
        EvaluateExObject(childExObject, results, currentPath, exObjectInstancePaths)

function EvaluateCloneCount(exObject, results):
    if exObject has cloneCountProperty:
        cloneCount = EvaluateExpr(exObject.cloneCountProperty.expr, results, evaluationContext)
    else:
        cloneCount = 1
    return cloneCount

function EvaluateExpr(expr, results, evaluationContext):
    if expr is NumberExpr:
        return expr.value
    else if expr is ReferenceExpr:
        target = expr.target
        if target is CloneNumberTarget:
            # Use the clone number from the current exObject instance
            cloneNumber = evaluationContext.currentExObjectInstance[1]
            return cloneNumber
        else if target is Property:
            propertyPath = PropertyPath(target)
            targetInstancePath = ConvertPropertyPathToPropertyInstancePath(propertyPath)
            return results[targetInstancePath]
        else if target is Parameter:
            return evaluationContext.parameterValue[target]
        else:
            raise Error("Reference target not found in results")
    else if expr is CallExpr:
        argsValues = []
        for each argExpr in expr.args:
            argValue = EvaluateExpr(argExpr, results, evaluationContext)
            argsValues.append(argValue)
        result = EvaluateExFunc(expr.exFunc, argsValues, evaluationContext)
        return result

function EvaluateExFunc(exFunc, argsValues, parentContext):
    funcContext = {
        parent: parentContext,
        currentInstancePath: parentContext.currentInstancePath,
        exObjectInstancePaths: parentContext.exObjectInstancePaths
    }
    for i from 0 to length of exFunc.parameters - 1:
        funcContext[exFunc.parameters[i]] = argsValues[i]
    result = EvaluateExpr(exFunc.expr, results, funcContext)
    return result
