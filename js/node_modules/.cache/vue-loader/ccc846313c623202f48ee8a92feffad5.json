{"remainingRequest":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/Node.vue?vue&type=style&index=0&id=19078932&scoped=true&lang=css","dependencies":[{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/Node.vue","mtime":1714946187071},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/css-loader/dist/cjs.js","mtime":1714947270570},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1714947393592},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/postcss-loader/src/index.js","mtime":1714947268362},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/cache-loader/dist/cjs.js","mtime":1714947270264},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js","mtime":1714947393584}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zZWFyY2hlciB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMTAwJTsKfQoubm9kZS1yb290IHsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLmZ1bmN0aW9uIHsKICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlOwp9Ci5oaWdobGlnaHRlZCB7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KLmJyaW5nLXRvLWZyb250IHsKICB6LWluZGV4OiAxOwp9Cg=="},{"version":3,"sources":["Node.vue"],"names":[],"mappings":";AA4HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Node.vue","sourceRoot":"src/components","sourcesContent":["w<template>\n  <span class=\"node-root\">\n    <span v-if=\"isPenBeforeMe\"><b>|</b></span>\n    <span\n      v-if=\"astNode.value != null\"\n      @click=\"click\"\n      :class=\"{ highlighted }\"\n      >{{ astNode.value }}</span\n    >\n    <span\n      v-else-if=\"astNode.metaname === 'Reference'\"\n      @click=\"click\"\n      :class=\"{ highlighted }\"\n      >{{ referenceToString(astNode) }}</span\n    >\n    <span v-else-if=\"astNode.metaname === 'Vector'\">\n      <span :class=\"{ highlighted }\" @click=\"click\">&lt;</span>\n      <Node :astNode=\"astNodeChildren[0]\" />,\n      <Node :astNode=\"astNodeChildren[1]\" />\n      <span :class=\"{ highlighted }\" @click=\"click\">&gt;</span>\n    </span>\n    <span v-else>\n      <span @click=\"click\" :class=\"['function', { highlighted }]\"\n        >{{ funToString(astNode) }}(</span\n      >\n      <span v-for=\"(child, index) in astNodeChildren\" :key=\"child.id\">\n        <Node :astNode=\"child\" />\n        <span v-if=\"index !== astNodeChildren.length - 1\">, </span>\n      </span>\n      <span :class=\"{ highlighted }\">)</span>\n    </span>\n    <span v-if=\"isPenAfterMe\"><b>|</b></span>\n    <!-- <NodePicker\n      ref=\"searcher\"\n      v-if=\"picking\"\n      :nodeToReplace=\"astNode\"\n      @blur=\"blur\"\n      :class=\"['searcher', { 'bring-to-front': picking }]\"\n    /> -->\n  </span>\n</template>\n\n<script>\nimport { PenPositionRelation } from \"@/store/Pen\";\nimport Root from \"../store/Root\";\nimport NodePicker from \"./NodePicker\";\n\nexport default {\n  name: \"Node\",\n  components: {\n  },\n  props: {\n    astNode: { value: 0 },\n  },\n  data: () => {\n    return {\n      Root: Root,\n      nodeStore: Root.nodeStore,\n    };\n  },\n  computed: {\n    highlighted() {\n      return (\n        Root.penStore.getPenPosition().positionType === \"Node\" &&\n        Root.penStore.getPenPosition().referenceNodeId === this.astNode.id &&\n        Root.penStore.getPenPosition().relation === PenPositionRelation.On\n      );\n    },\n    isPenBeforeMe() {\n      return (\n        Root.penStore.getPenPosition().positionType === \"Node\" &&\n        Root.penStore.getPenPosition().referenceNodeId === this.astNode.id &&\n        Root.penStore.getPenPosition().relation === PenPositionRelation.Before\n      );\n    },\n    isPenAfterMe() {\n      return (\n        Root.penStore.getPenPosition().positionType === \"Node\" &&\n        Root.penStore.getPenPosition().referenceNodeId === this.astNode.id &&\n        Root.penStore.getPenPosition().relation === PenPositionRelation.After\n      );\n    },\n    picking() {\n      return (\n        Root.pen.getPenPosition().referenceNodeId === this.astNode.id &&\n        Root.penStore.getIsQuerying()\n      );\n    },\n    astNodeChildren() {\n      Root.nodeCollection.nodeParents.length; // trigger reactive\n      return Root.nodeStore.getChildren(this.astNode).toArray();\n    },\n  },\n  methods: {\n    click() {\n      Root.penStore.setPointedNode(this.astNode);\n    },\n    blur() {\n      // Actions.blurCursor();\n    },\n    referenceToString(referenceNode) {\n      const targetNode = Root.nodeStore.getTargetNodeForReference(\n        referenceNode\n      );\n      return Root.attributeStore.getAttributeForNode(targetNode).name;\n    },\n    funToString(funNode) {\n      const metafun = Root.metafunStore.getFromName(funNode.metafunName);\n      return metafun.name;\n    },\n  },\n  watch: {\n    picking() {\n      // if (this.picking) {\n      //   this.$nextTick().then(() => {\n      //     this.$refs[\"searcher\"].focus();\n      //   });\n      // }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.searcher {\n  position: absolute;\n  top: 100%;\n}\n.node-root {\n  position: relative;\n}\n.function {\n  text-transform: lowercase;\n}\n.highlighted {\n  font-weight: bold;\n}\n.bring-to-front {\n  z-index: 1;\n}\n</style>\n"]}]}