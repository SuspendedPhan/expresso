{"remainingRequest":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/Viewport.vue?vue&type=style&index=0&id=3db355d6&scoped=true&lang=css","dependencies":[{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/Viewport.vue","mtime":1714946187072},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/css-loader/dist/cjs.js","mtime":1714947270570},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1714947393592},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/postcss-loader/src/index.js","mtime":1714947268362},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/cache-loader/dist/cjs.js","mtime":1714947270264},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js","mtime":1714947393584}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5mcHMgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBib3R0b206IDA7CiAgcmlnaHQ6IDA7CiAgbWFyZ2luOiAyMHB4OwogIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogIHdpZHRoOiA1MHB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQoubm9kZXMgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBib3R0b206IDA7CiAgcmlnaHQ6IDcwcHg7CiAgbWFyZ2luOiAyMHB4OwogIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogIHBhZGRpbmctbGVmdDogMTBweDsKICBwYWRkaW5nLXJpZ2h0OiAxMHB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQo="},{"version":3,"sources":["Viewport.vue"],"names":[],"mappings":";AAsJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Viewport.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"viewport\" ref=\"viewport\">\n    <canvas\n      :width=\"width\"\n      :height=\"height\"\n      ref=\"canvas\"\n      @mousemove=\"testMethod($event)\"\n    >\n    </canvas>\n    <div class=\"fps\">{{ framerate }}</div>\n    <div class=\"nodes\">nodes: {{ Root.nodeCollection.nodes.items.length }}</div>\n  </div>\n</template>\n\n<script lang='ts'>\nimport Root, { RenderShape } from \"../store/Root\";\nimport fps from \"fps\";\nimport numeral from \"numeral\";\nimport Component from \"vue-class-component\";\nimport Vue from \"vue\";\nimport * as PIXI from \"pixi.js\";\nimport deePool from \"deepool\";\nimport { SignalDispatcher } from \"ste-signals\";\n\n(window as any).root = Root;\n\n@Component({})\nexport default class Viewport extends Vue {\n  width = 0;\n  height = 0;\n  framerate = 0;\n  Root = Root;\n  mostRecentClickCoordinates = { x: 0, y: 0 };\n  app = null as any;\n  circlePool = null as any;\n  circles = [] as any[];\n  rectanglePool = null as any;\n  rectangles = [] as any[];\n  ticker = fps({ every: 10 });\n\n  created() {\n    this.ticker.on(\n      \"data\",\n      (framerate) => (this.framerate = numeral(framerate).format(\"0\"))\n    );\n  }\n\n  mounted() {\n    this.app = new PIXI.Application({\n      resizeTo: this.$refs[\"viewport\"] as any,\n      view: this.$refs[\"canvas\"] as any,\n      antialias: true,\n    });\n    this.circlePool = deePool.create(this.makeCircle);\n    this.circlePool.grow(100);\n    this.rectanglePool = deePool.create(this.makeRectangle);\n    this.rectanglePool.grow(100);\n    this.update();\n  }\n\n  testMethod(event) {\n    this.mostRecentClickCoordinates = {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  }\n\n  update() {\n    if (this.$refs.viewport === undefined) return;\n\n    this.ticker.tick();\n    const viewport = this.$refs.viewport as any;\n    const canvas = this.$refs.canvas;\n    this.width = viewport.clientWidth;\n    this.height = viewport.clientHeight;\n    Root.setWindowSize(this.width, this.height);\n    Root.setMouseLocation(\n      this.mostRecentClickCoordinates.x,\n      this.mostRecentClickCoordinates.y\n    );\n\n    for (const circle of this.circles) {\n      circle.visible = false;\n    }\n\n    for (const rectangle of this.rectangles) {\n      rectangle.visible = false;\n    }\n\n    const doneRenderingSignal = new SignalDispatcher();\n    const renderCommands = Root.computeRenderCommands();\n    for (const renderCommand of renderCommands) {\n      const alpha = renderCommand.alpha ?? 0.5;\n      const hue = renderCommand.hue ?? 0;\n      const saturation = renderCommand.saturation ?? 0;\n      const lightness = renderCommand.lightness ?? 0.5;\n      const fillStyle = `hsla(${hue * 360}, ${saturation * 100}%, ${\n        lightness * 100\n      }%, ${alpha})`;\n      if (renderCommand.shape === RenderShape.Circle) {\n        const circle = this.circlePool.use();\n        circle.visible = true;\n        circle.x = renderCommand.x;\n        circle.y = renderCommand.y;\n        circle.scale.x = renderCommand.radius;\n        circle.scale.y = renderCommand.radius;\n        // circle.tint = ''\n        doneRenderingSignal.sub(() => this.circlePool.recycle(circle));\n      } else if (renderCommand.shape === RenderShape.Rectangle) {\n        const centerx = renderCommand.x - renderCommand.width / 2;\n        const centery = renderCommand.y - renderCommand.height / 2;\n        const rectangle = this.rectanglePool.use();\n        rectangle.visible = true;\n        rectangle.x = centerx;\n        rectangle.y = centery;\n        rectangle.scale.x = renderCommand.width;\n        rectangle.scale.y = renderCommand.height;\n        doneRenderingSignal.sub(() => this.rectanglePool.recycle(rectangle));\n      } else if (renderCommand.shape === RenderShape.Line) {\n      }\n    }\n\n    doneRenderingSignal.dispatch();\n\n    window.requestAnimationFrame(this.update);\n  }\n\n  makeCircle() {\n    const ret = new PIXI.Graphics();\n    ret.beginFill(0x9966ff);\n    ret.drawCircle(0, 0, 1);\n    ret.endFill();\n    this.circles.push(ret);\n    this.app.stage.addChild(ret);\n    return ret;\n  }\n\n  makeRectangle() {\n    const ret = new PIXI.Graphics();\n    ret.beginFill(0x9966ff);\n    ret.drawRect(0, 0, 1, 1);\n    ret.endFill();\n    this.rectangles.push(ret);\n    this.app.stage.addChild(ret);\n    return ret;\n  }\n}\n</script>\n\n<style scoped>\n.fps {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  margin: 20px;\n  background-color: white;\n  width: 50px;\n  text-align: center;\n}\n.nodes {\n  position: absolute;\n  bottom: 0;\n  right: 70px;\n  margin: 20px;\n  background-color: white;\n  padding-left: 10px;\n  padding-right: 10px;\n  text-align: center;\n}\n</style>\n"]}]}