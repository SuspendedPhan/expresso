{"remainingRequest":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/Expressor.vue?vue&type=style&index=0&id=266097d3&scoped=true&lang=css","dependencies":[{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/Expressor.vue","mtime":1714946187070},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/css-loader/dist/cjs.js","mtime":1714947270570},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1714947393592},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/postcss-loader/src/index.js","mtime":1714947268362},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/cache-loader/dist/cjs.js","mtime":1714947270264},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js","mtime":1714947393584}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5leHByZXNzb3IgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBvdXRsaW5lOiBub25lOwp9Ci5vcmdhbmlzbSB7CiAgbWFyZ2luLWJvdHRvbTogMjBweDsKfQouYXR0cmlidXRlIHsKfQouY29udHJvbHMgewogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBtYXgtY29udGVudCBtYXgtY29udGVudCBtYXgtY29udGVudDsKICBnYXA6IDEwcHg7Cn0KLmJvdHRvbS1ncm91cCB7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47Cn0KLmVycm9yLWJveCB7CiAgcGFkZGluZzogNXB4OwogIGZvbnQtc2l6ZTogMTJweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMCwgMTAwJSwgNjclKTsKICB2aXNpYmlsaXR5OiBoaWRkZW47CiAgY29sb3I6IHdoaXRlOwp9Ci5lcnJvci1ib3guZXJyb3IgewogIHZpc2liaWxpdHk6IHZpc2libGU7Cn0KLmNhbnZhcyB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICB0b3A6IDBweDsKICBsZWZ0OiAwcHg7CiAgYm9yZGVyOiBub25lOwp9Ci5jbGVhclN0b3JhZ2UgewogIHBvc2l0aW9uOiBmaXhlZDsKICB0b3A6IDEwcHg7CiAgbGVmdDogMjAwcHg7CiAgei1pbmRleDogMjsKfQo="},{"version":3,"sources":["Expressor.vue"],"names":[],"mappings":";AAmJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Expressor.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"expressor\" ref=\"expressor\">\n    <canvas\n      ref=\"canvas\"\n      type=\"2d\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      class=\"canvas\"\n    ></canvas>\n    <div ref=\"panzoom\">\n      <Organism :organism=\"root.organismCollection.getRoot()\" :isRoot=\"true\" />\n      <div class=\"absolute border-solid border-2\" :style=\"boxStyle\"></div>\n      <div class=\"bottom-group\">\n        <button @click=\"clearStorage\" class=\"clearStorage\">\n          Clear storage\n        </button>\n        <div :class=\"['error-box', { error: consoleError }]\">\n          you have console errors\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { PenPositionRelation } from \"@/store/Pen\";\nimport wu from \"wu\";\nimport Root from \"../store/Root\";\nimport Node from \"./Node\";\nimport Organism from \"./Organism\";\nimport Vue from \"vue\";\nimport panzoom from \"panzoom\";\nimport Component from \"vue-class-component\";\nimport { Prop } from \"vue-property-decorator\";\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\n\n@Component({\n  components: {\n    // Node,\n    Organism,\n  },\n})\nexport default class Expressor extends Vue {\n  root = Root;\n  attributeStore = Root.attributeStore;\n  metaorganismCollection = Root.metaorganismCollection;\n  selectedPrimitiveId = Root.metaorganismCollection.getMetaorganisms()[0].id;\n  consoleError = false;\n  canvasWidth = 0;\n  canvasHeight = 0;\n  panzoomTransform = {};\n  lines = [];\n\n  box = {\n    width: 0,\n    height: 0\n  }\n\n  get boxStyle() {\n    console.log(\"get style\");\n    console.log(this.box.width);\n    return `left: 0px; width: ${this.box.width}px; height: ${this.box.height}px`;\n  }\n\n  getNodeForAttribute(attribute) {\n    return Root.nodeStore.getChild(\n      Root.attributeStore.getRootNode(attribute),\n      0\n    );\n  }\n\n  spawn() {\n    const metaorganism = this.metaorganismCollection.getFromId(\n      this.selectedPrimitiveId\n    );\n    this.root.organismCollection.putFromMeta(undefined, metaorganism);\n    this.root.save();\n  }\n\n  clearStorage() {\n    this.root.clearStorage();\n  }\n\n  removeOrganism(organism) {\n    this.root.organismCollection.remove(organism);\n    this.root.save();\n  }\n\n  drawLines() {\n    const context = this.$refs[\"canvas\"].getContext(\"2d\");\n    context.resetTransform();\n    context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n    const transform = this.panzoomTransform;\n    context.setTransform(\n      transform.scale,\n      0,\n      0,\n      transform.scale,\n      transform.x,\n      transform.y\n    );\n    context.strokeStyle = \"gray\";\n    for (const line of this.lines) {\n      context.beginPath();\n      context.moveTo(line.startX, line.startY);\n      context.lineTo(line.endX, line.endY);\n      context.stroke();\n    }\n  }\n\n  mounted() {\n    const pz = panzoom(this.$refs[\"panzoom\"], {\n      beforeMouseDown: function (e) {\n        var shouldIgnore = !e.altKey;\n        return shouldIgnore;\n      },\n      filterKey: function (/* e, dx, dy, dz */) {\n        // don't let panzoom handle this event:\n        return true;\n      },\n      zoomDoubleClickSpeed: 1,\n    });\n    pz.on(\"transform\", (e) => {\n      this.panzoomTransform = pz.getTransform();\n      this.drawLines();\n    });\n\n    // NOTE: maybe can remove?\n    this.canvasWidth = this.$refs[\"expressor\"].clientWidth;\n    this.canvasHeight = this.$refs[\"expressor\"].clientHeight;\n\n    new ResizeSensor(this.$refs[\"expressor\"], () => {\n      this.canvasWidth = this.$refs[\"expressor\"].clientWidth;\n      this.canvasHeight = this.$refs[\"expressor\"].clientHeight;\n    });\n\n    this.root.organismLayout.onCalculated.subscribe((output) => {\n      this.lines = output.lines;\n      this.box.width = output.totalWidth;\n      this.box.height = output.totalHeight;\n      this.drawLines();\n    });\n  }\n}\n</script>\n\n<style scoped>\n.expressor {\n  position: relative;\n  outline: none;\n}\n.organism {\n  margin-bottom: 20px;\n}\n.attribute {\n}\n.controls {\n  display: grid;\n  grid-template-columns: max-content max-content max-content;\n  gap: 10px;\n}\n.bottom-group {\n  display: flex;\n  justify-content: space-between;\n}\n.error-box {\n  padding: 5px;\n  font-size: 12px;\n  background-color: hsl(0, 100%, 67%);\n  visibility: hidden;\n  color: white;\n}\n.error-box.error {\n  visibility: visible;\n}\n.canvas {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0px;\n  left: 0px;\n  border: none;\n}\n.clearStorage {\n  position: fixed;\n  top: 10px;\n  left: 200px;\n  z-index: 2;\n}\n</style>\n"]}]}