{"remainingRequest":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/NodePicker.vue?vue&type=style&index=0&id=0f029b60&scoped=true&lang=css","dependencies":[{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/NodePicker.vue","mtime":1714946187071},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/css-loader/dist/cjs.js","mtime":1714947270570},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1714947393592},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/postcss-loader/src/index.js","mtime":1714947268362},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/cache-loader/dist/cjs.js","mtime":1714947270264},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js","mtime":1714947393584}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5ub2RlLXBpY2tlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgYm9yZGVyLWNvbG9yOiBibGFjazsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItc3R5bGU6IHNvbGlkOwogIGJveC1zaGFkb3c6IDBweCAwcHggNHB4IHJnYmEoMCwgMCwgMCwgMC4yNSk7CiAgcGFkZGluZzogMTBweDsKICBoZWlnaHQ6IDI1dmg7CiAgb3ZlcmZsb3cteTogYXV0bzsKfQouc3VnZ2VzdGlvbiB7CiAgdGV4dC10cmFuc2Zvcm06IGxvd2VyY2FzZTsKfQouaW5wdXQgewogIHdpZHRoOiAxMDAlOwogIG91dGxpbmU6IG5vbmU7CiAgYm9yZGVyOiBub25lOwp9Ci5zdWdnZXN0aW9uOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjYThkMWZmOwp9Ci5kaXZpZGVyIHsKICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAuMik7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKICBtYXJnaW4tdG9wOiAxMHB4Owp9Cg=="},{"version":3,"sources":["NodePicker.vue"],"names":[],"mappings":";AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NodePicker.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div class='node-picker'>\n  <input class='input' ref=\"input\" @blur='blur' @keydown='keydown' v-model='query' />\n  <div class='divider'></div>\n  <div>\n    <div v-for='(suggestion, index) in suggestions' :key='index' class='suggestion' @mousedown='onClick(suggestion, $event)'>\n      {{ suggestion.text }}\n    </div>\n  </div>\n</div>\n</template>\n\n<script>\nimport Root from '../store/Root';\nimport Store from '../store/Root';\n\nexport default {\n  name: 'NodePicker',\n  data: function() {\n    return {\n      searchText: '',\n      Root: Root,\n      nodeStore: Root.nodeStore,\n      penStore: Root.penStore,\n    };\n  },\n  methods: {\n    keydown(event) {\n      if (event.key === 'Enter' && this.suggestions.length > 0) {\n        if (Root.penStore.getQuery() !== '') {\n          const result = this.suggestions[0];\n          Root.penStore.commitNodeChoice(result);\n        }\n\n        this.blur();\n        event.preventDefault();\n      } else if (event.key === 'Escape') {\n        event.preventDefault();\n        this.blur();\n      }\n    },\n    focus() {\n      this.$refs['input'].focus();\n    },\n    blur() {\n      Root.pen.setIsQuerying(false);\n      this.$emit('blur');\n    },\n    onClick(suggestion, event) {\n      Root.pen.commitNodeChoice(suggestion);\n      event.preventDefault();\n      this.blur();\n    }\n  },\n  computed: {\n    suggestions() {\n      return Array.from(Root.penStore.getNodeChoices());\n    },\n    query: {\n      get: function() {\n        return Root.penStore.getQuery();\n      },\n      set: function(query) {\n        Root.penStore.setQuery(query);\n      }\n    },\n  }\n}\n</script>\n\n<style scoped>\n.node-picker {\n  background-color: white;\n  border-color: black;\n  border-width: 1px;\n  border-style: solid;\n  box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.25);\n  padding: 10px;\n  height: 25vh;\n  overflow-y: auto;\n}\n.suggestion {\n  text-transform: lowercase;\n}\n.input {\n  width: 100%;\n  outline: none;\n  border: none;\n}\n.suggestion:hover {\n  background-color: #a8d1ff;\n}\n.divider {\n  border-bottom: 1px solid rgba(0, 0, 0, .2);\n  margin-bottom: 10px;\n  margin-top: 10px;\n}\n</style>\n"]}]}