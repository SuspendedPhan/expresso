{"remainingRequest":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/StoreGraph.vue?vue&type=style&index=0&id=7581189d&scoped=true&lang=css","dependencies":[{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/StoreGraph.vue","mtime":1714946187072},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/css-loader/dist/cjs.js","mtime":1714947270570},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1714947393592},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/postcss-loader/src/index.js","mtime":1714947268362},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/cache-loader/dist/cjs.js","mtime":1714947270264},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js","mtime":1714947393584}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5mb3JjZU5vZGUgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKfQouc3ZnIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7Cn0KLlN0b3JlR3JhcGggewogIHBvc2l0aW9uOiBmaXhlZDsKICB0b3A6IDUwcHg7CiAgYm90dG9tOiA1MHB4OwogIGxlZnQ6IDUwcHg7CiAgcmlnaHQ6IDUwcHg7CiAgYmFja2dyb3VuZDogcmdiKDIxOCwgMjE4LCAyMTgpOwp9Ci5vcmdhbmlzbSB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIwNiwgMTY4LCAyNTUpOwp9Ci5ub2RlIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTY4LCAxOTYsIDI1NSk7Cn0KLmF0dHJpYnV0ZSB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE2OCwgMjU1LCAyMTkpOwp9Cg=="},{"version":3,"sources":["StoreGraph.vue"],"names":[],"mappings":";AAyKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StoreGraph.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"StoreGraph\" ref=\"container\">\n    <svg class=\"svg\" ref=\"svg\" :viewBox=\"viewBox\">\n      <g stroke=\"#FFF\" stroke-width=\"1\">\n        <line\n          v-for=\"(forceLink, index) in forceLinks\"\n          :key=\"index\"\n          :x1=\"forceLink.source.x\"\n          :x2=\"forceLink.target.x\"\n          :y1=\"forceLink.source.y\"\n          :y2=\"forceLink.target.y\"\n        ></line>\n      </g>\n    </svg>\n    <div\n      v-for=\"forceNode in forceNodes\"\n      :key=\"`${forceNode.id}|${forceNode.storetype}`\"\n      :class=\"[\n        'forceNode',\n        {\n          attribute: forceNode.storetype === undefined,\n          organism: forceNode.storetype === 'Organism',\n          node: forceNode.storetype === 'node',\n        },\n      ]\"\n      :style=\"{ left: left(forceNode), top: top(forceNode) }\"\n      :ref=\"refNameForForceNode(forceNode)\"\n      @click=\"nodeClicked(forceNode)\"\n    >\n      {{ forceNode.name }}\n    </div>\n  </div>\n</template>\n\n<script lang='ts'>\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { Prop, Watch } from \"vue-property-decorator\";\nimport * as d3 from \"d3\";\nimport Root from \"../store/Root\";\nimport Functions from \"@/code/Functions\";\n\n@Component({})\nexport default class StoreGraph extends Vue {\n  forceNodes = [];\n  forceLinks = [];\n  viewBox = \"0 0 50 50\";\n  simulation = null as any;\n\n  private mounted() {\n    Vue.nextTick(() => this.init());\n    const container = this.$refs.container as any;\n    this.viewBox = `0 0 ${container.clientWidth} ${container.clientHeight}`;\n  }\n\n  private destroyed() {\n    this.simulation.stop();\n  }\n\n  private init() {\n    const container = this.$refs.container as any;\n\n    this.addNodesAndLinksForOrganism(\n      Root.organismCollection.getRoot(),\n      this.forceNodes,\n      this.forceLinks\n    );\n\n    this.simulation = d3\n      .forceSimulation(this.forceNodes)\n      .force(\n        \"link\",\n        d3\n          .forceLink(this.forceLinks)\n          .id((t) => t.id)\n          .distance(100)\n      )\n      .force(\n        \"center\",\n        d3.forceCenter(container.clientWidth / 2, container.clientHeight / 2)\n      )\n      .force(\"charge\", d3.forceManyBody().strength(-300))\n      .force(\"bound\", this.boundForce);\n\n    this.simulation.on(\"tick\", () => {\n      this.$forceUpdate();\n    });\n  }\n\n  private left(forceNode) {\n    const refArray = this.$refs[this.refNameForForceNode(forceNode)] as any;\n    if (refArray === undefined) return \"0px\";\n\n    const ref = refArray[0];\n    const value = forceNode.x - ref.clientWidth / 2;\n    return `${value}px`;\n  }\n\n  private top(forceNode) {\n    const refArray = this.$refs[this.refNameForForceNode(forceNode)] as any;\n    if (refArray === undefined) return \"0px\";\n\n    const ref = refArray[0];\n    const value = forceNode.y - ref.clientHeight / 2;\n    return `${value}px`;\n  }\n\n  private refNameForForceNode(forceNode) {\n    return `forceNode|${forceNode.id}`;\n  }\n\n  private addNodesAndLinksForOrganism(organism, forceNodes, forceLinks) {\n    forceNodes.push({\n      id: organism.id,\n      name: organism.name,\n      storetype: organism.storetype,\n    });\n\n    for (const child of Root.organismCollection.getChildren(organism)) {\n      forceLinks.push({ source: organism.id, target: child.id });\n      this.addNodesAndLinksForOrganism(child, forceNodes, forceLinks);\n    }\n\n    for (const attribute of Root.attributeCollection.getAttributesForOrganism(\n      organism\n    )) {\n      forceNodes.push({\n        id: attribute.id,\n        name: attribute.name,\n        storetype: attribute.storetype,\n      });\n      forceLinks.push({ source: organism.id, target: attribute.id });\n\n      const rootNode = Root.attributeCollection.getRootNode(attribute);\n      forceLinks.push({ source: attribute.id, target: rootNode.id });\n      this.addNodesAndLinksForNode(rootNode, forceNodes, forceLinks);\n    }\n  }\n\n  private addNodesAndLinksForNode(node, forceNodes, forceLinks) {\n    forceNodes.push({\n      id: node.id,\n      name: node.value ?? node.metafunName ?? node.metaname,\n      storetype: node.storetype,\n      node: node\n    });\n    for (const child of Root.nodeCollection.getChildren(node)) {\n      forceLinks.push({ source: node.id, target: child.id });\n      this.addNodesAndLinksForNode(child, forceNodes, forceLinks);\n    }\n  }\n\n  private boundForce(alpha) {\n    const ref = this.$refs.container as any;\n    for (const forceNode of this.forceNodes as any[]) {\n      forceNode.x = Math.max(5, forceNode.x);\n      forceNode.x = Math.min(ref.clientWidth - 5, forceNode.x);\n      forceNode.y = Math.max(5, forceNode.y);\n      forceNode.y = Math.min(ref.clientHeight - 5, forceNode.y);\n    }\n  }\n\n  private nodeClicked(forceNode) {\n    console.log(forceNode);\n  }\n}\n</script>\n\n<style scoped>\n.forceNode {\n  position: absolute;\n  background-color: white;\n}\n.svg {\n  position: absolute;\n}\n.StoreGraph {\n  position: fixed;\n  top: 50px;\n  bottom: 50px;\n  left: 50px;\n  right: 50px;\n  background: rgb(218, 218, 218);\n}\n.organism {\n  background-color: rgb(206, 168, 255);\n}\n.node {\n  background-color: rgb(168, 196, 255);\n}\n.attribute {\n  background-color: rgb(168, 255, 219);\n}\n</style>"]}]}