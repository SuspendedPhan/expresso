{"remainingRequest":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/Organism.vue?vue&type=style&index=0&id=62bde802&scoped=true&lang=css","dependencies":[{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/Organism.vue","mtime":1714946187071},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/css-loader/dist/cjs.js","mtime":1714947270570},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1714947393592},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/postcss-loader/src/index.js","mtime":1714947268362},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/cache-loader/dist/cjs.js","mtime":1714947270264},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/vue-loader/lib/index.js","mtime":1714947393584}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5vcmdhbmlzbSB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIC8qIG1hcmdpbi1ib3R0b206IDIwcHg7ICovCiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7CiAgcGFkZGluZy1sZWZ0OiAyMHB4OwogIHBhZGRpbmctcmlnaHQ6IDIwcHg7CiAgcGFkZGluZy10b3A6IDIwcHg7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIC8qIG1hcmdpbi10b3A6IDEwcHg7ICovCiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7Cn0KLmNvbnRyb2xzIHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogbWF4LWNvbnRlbnQgbWF4LWNvbnRlbnQ7CiAgZ2FwOiAxMHB4OwogIG1hcmdpbi10b3A6IDEwcHg7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKfQouYXR0cmlidXRlLWdyb3VwIHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtYXV0by1yb3dzOiBhdXRvOwogIC8qIGdhcDogMTBweDsgKi8KfQouZGl2aWRlciB7CiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4yKTsKICBtYXJnaW4tYm90dG9tOiAyMHB4OwogIG1hcmdpbi10b3A6IDEwcHg7Cn0KLm9yZ2FuaXNtLW5hbWUgewogIGNvbG9yOiAjNGRjNDdkOwogIGZvbnQtd2VpZ2h0OiA1MDA7CiAgZm9udC1zaXplOiAyNHB4Owp9Ci50aXRsZS1iYXIgewogIGRpc3BsYXk6IGZsZXg7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwp9Ci5idXR0b24gewogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiL2ljb25zL3JlbW92ZS5zdmciKTsKICBiYWNrZ3JvdW5kLXNpemU6IDE2cHggMTZweDsKICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsKICB3aWR0aDogMjBweDsKICBoZWlnaHQ6IDIwcHg7CiAgYm9yZGVyOiBub25lOwp9Cg=="},{"version":3,"sources":["Organism.vue"],"names":[],"mappings":";AA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Organism.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div v-if=\"organism\" class=\"organism\" ref=\"organism\" :style=\"style\">\n    <div class=\"title-bar\">\n      <div class=\"organism-name\">\n        {{ organism.name }} ({{ getMetaname(organism) }})\n      </div>\n      <button\n        v-if=\"!isRoot\"\n        class=\"button\"\n        @click=\"removeOrganism(organism)\"\n      ></button>\n    </div>\n    <div class=\"controls\">\n      <select v-model=\"selectedPrimitiveId\">\n        <option\n          v-for=\"metaorganism in metaorganismCollection.getMetaorganisms()\"\n          :key=\"metaorganism.id\"\n          :value=\"metaorganism.id\"\n        >\n          {{ metaorganism.name }}\n        </option>\n      </select>\n      <button @click=\"spawn\">Spawn Suborganism</button>\n      <input placeholder=\"Attribute name\" v-model=\"attributeName\" />\n      <button @click=\"addAttribute\">Add Attribute</button>\n    </div>\n    <div class=\"attribute-group\">\n      <div\n        class=\"attribute\"\n        v-for=\"(attribute, index) in editableAttributes\"\n        :key=\"attribute.id\"\n      >\n        <div v-if=\"index !== 0\" class=\"divider\"></div>\n        <Attribute :attributeModel=\"attribute\" />\n      </div>\n    </div>\n    <Organism\n      class=\"organ\"\n      v-for=\"organ in root.organismCollection.getChildren(organism)\"\n      :key=\"organ.id\"\n      :organism=\"organ\"\n    >\n    </Organism>\n  </div>\n</template>\n\n<script lang='ts'>\nimport wu from \"wu\";\nimport Root from \"../store/Root\";\nimport AttributeComponent from \"./Attribute.vue\";\nimport ResizeSensor from \"css-element-queries/src/ResizeSensor\";\nimport Vue from \"vue\";\nimport Component from \"vue-class-component\";\nimport { Prop } from \"vue-property-decorator\";\nimport Attribute from \"@/models/Attribute\";\nimport {Primitive} from \"@/models/Type\";\n\n@Component({ components: { Attribute: AttributeComponent } })\nexport default class Organism extends Vue {\n  @Prop() organism!: any;\n  @Prop() isRoot!: boolean;\n\n  root = Root;\n  attributeStore = Root.attributeStore;\n  metaorganismCollection = Root.metaorganismCollection;\n  selectedPrimitiveId = Root.metaorganismCollection.getMetaorganisms()[0].id;\n  attributeName = \"\";\n  editableAttributes = [] as any[];\n  position = {\n    top: 0,\n    left: 0,\n  };\n\n  get style() {\n    return `left: ${this.position.left}px; top: ${this.position.top}px;`;\n  }\n\n  getNodeForAttribute(attribute) {\n    Root.nodeCollection.nodeParents.length; // trigger reactive\n    return Root.nodeStore.getChild(\n      Root.attributeStore.getRootNode(attribute),\n      0\n    );\n  }\n\n  spawn() {\n    const metaorganism = this.metaorganismCollection.getFromId(\n      this.selectedPrimitiveId\n    );\n    const organ = this.root.organismCollection.putFromMeta(\n      this.root.wordCollection.getRandomWord(),\n      metaorganism\n    );\n    this.root.organismCollection.addChild(this.organism, organ);\n    this.root.save();\n  }\n\n  addAttribute() {\n    const attributeName =\n      this.attributeName === \"\"\n        ? this.root.wordCollection.getRandomWord()\n        : this.attributeName;\n    this.root.attributeCollection.putEditable(this.organism, attributeName, Primitive.Undetermined);\n    this.root.save();\n  }\n\n  clearStorage() {\n    this.root.clearStorage();\n  }\n\n  removeOrganism(organism) {\n    this.root.organismCollection.remove(organism);\n    this.root.save();\n  }\n\n  init() {\n    const element = this.$refs[\"organism\"] as any;\n    new ResizeSensor(element, () => {\n      this.root.organismLayout.recalculate();\n    });\n\n    this.root.organismLayout.registerElement(element, this.organism.id);\n    this.root.organismLayout\n      .getLocalPositionObservable(this.organism.id)\n      .subscribe((localPosition) => {\n        this.position.top = localPosition.top;\n        this.position.left = localPosition.left;\n      });\n\n    Attribute.onAttributeCountChanged.sub(() => {\n      Vue.set(this, \"editableAttributes\", this.getEditableAttributes());\n    });\n    this.editableAttributes = this.getEditableAttributes();\n  }\n\n  getEditableAttributes() {\n    return Array.from(Attribute.getEditables(this.organism));\n  }\n\n  getMetaname(organism) {\n    return this.root.metaorganismCollection.getFromId(organism.metaorganismId).name;\n  }\n\n  mounted() {\n    if (this.organism == null) {\n      window.setTimeout(() => this.init(), 200);\n      return;\n    } else {\n      this.init();\n    }\n  }\n\n  destroyed() {\n    this.root.organismLayout.recalculate();\n  }\n}\n</script>\n\n<style scoped>\n.organism {\n  position: absolute;\n  /* margin-bottom: 20px; */\n  border: 1px solid black;\n  padding-left: 20px;\n  padding-right: 20px;\n  padding-top: 20px;\n  border-radius: 2px;\n  /* margin-top: 10px; */\n  background-color: white;\n}\n.controls {\n  display: grid;\n  grid-template-columns: max-content max-content;\n  gap: 10px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.attribute-group {\n  display: grid;\n  grid-auto-rows: auto;\n  /* gap: 10px; */\n}\n.divider {\n  border-bottom: 2px solid rgba(0, 0, 0, 0.2);\n  margin-bottom: 20px;\n  margin-top: 10px;\n}\n.organism-name {\n  color: #4dc47d;\n  font-weight: 500;\n  font-size: 24px;\n}\n.title-bar {\n  display: flex;\n  justify-content: space-between;\n}\n.button {\n  background-image: url(\"/icons/remove.svg\");\n  background-size: 16px 16px;\n  background-repeat: no-repeat;\n  background-position: center;\n  width: 20px;\n  height: 20px;\n  border: none;\n}\n</style>\n"]}]}