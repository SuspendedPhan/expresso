{"remainingRequest":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/babel-loader/lib/index.js!/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/ts-loader/index.js??ref--14-2!/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/eslint-loader/index.js??ref--13-0!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/store/Pen.ts","dependencies":[{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/store/Pen.ts","mtime":1714946187077},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/babel.config.js","mtime":1714946187052},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/cache-loader/dist/cjs.js","mtime":1714947270264},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/babel-loader/lib/index.js","mtime":1714947394795},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/ts-loader/index.js","mtime":1714947267504},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/eslint-loader/index.js","mtime":1714947270651}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["wu","Functions","EventEmitter","Primitive","Attribute","Metastruct","Node","PenPositionRelation","Pen","constructor","root","penPosition","positionType","query","isQuerying","selection","events","setMaxListeners","nodeCollection","nodeStore","getNodeChoices","answer","requiredType","getPointedNode","datatype","number","Number","parseFloat","isNaN","Undetermined","push","text","toString","addNodeFunction","addNumber","console","log","assert","pointedAttribute","attributeCollection","getAttributeForNode","pointedOrganism","getOrganismForAttribute","ancestors","organismCollection","getAncestors","organism","chain","attributes","getAttributesForOrganism","attribute","filter","nodeChoices","getNodeChoicesForAttribute","nodeChoice","metafun","metafunStore","getFuns","isSubsequence","toLowerCase","name","inputTypesFromOutputType","mustBeNumberType","undefined","validOutputType","okNumberType","isUndetermined","ok","outputType","defaultOutputType","addFun","i","members","length","member","type","path","addStructMemberReference","getRootNode","rootNode","addReference","getIsQuerying","getSerialized","getQuery","getPenPosition","getAnnotatedTextForAttribute","node","getChild","getAnnotatedTextForNode","getTextForAttribute","map","t","char","join","getSelection","astNode","metaname","textToAnnotatedText","value","id","builtinMetastructs","Vector","getChildren","toArray","xNode","yNode","concat","referenceToString","funName","funToString","children","Array","from","child","error","structMemberReferenceToString","setPointedNode","annotatedText","makeSelectionForNode","getAttributeFromId","attributeId","startIndex","referenceNode","targetNode","getTargetNodeForReference","attributeStore","getFromId","targetVariableNodeId","memberName","memberIndex","attributeName","funNode","getFromName","metafunName","split","getCharBoundsForNode","endIndex","deserialize","store","Object","assign","setIsQuerying","setQuery","setSelection","calcSelection","prevSelection","didPassOverSingleCharNode","didGoLeft","_node","getNodeToLeftOfChar","_annotatedText$select","_annotatedText$select2","leftNode","rightNode","getNodeToRightOfChar","makeFrontSelectionForNode","isIndexInsideNode","frontIndex","Math","min","backIndex","max","prevSingleChar","currentSingleChar","charBoundsForNode","oneCharApart","skippedOverNode","charIndex","index","commitNodeChoice","isUndeterminedAttribute","isCursorInserting","insertNodeAsParent","replaceNode","moveCursorRight","emit","getSelectedAttribute","tryPromoteSelectionToRoot","reparent","newParent","childIndex","isZeroLengthSelection","commitFirstNodeChoice","next"],"sources":["/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/eslint-loader/index.js??ref--13-0!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/store/Pen.ts"],"sourcesContent":["import wu from \"wu\";\nimport { Root } from \"./Root\";\nimport Functions from \"../code/Functions\";\nimport { EventEmitter } from \"events\";\nimport Type, { Primitive } from \"@/models/Type\";\nimport Attribute from \"@/models/Attribute\";\nimport Metastruct from \"@/models/Metastruct\";\nimport Node from \"@/models/Node\";\n\ninterface NonePenPosition {\n  positionType: \"None\";\n}\n\ninterface NodePenPosition {\n  positionType: \"Node\";\n  referenceNodeId: string;\n  relation: PenPositionRelation;\n}\n\ntype PenPosition = NonePenPosition | NodePenPosition;\n\nexport enum PenPositionRelation {\n  On = \"On\",\n  After = \"After\",\n  Before = \"Before\"\n}\n\nexport interface Selection {\n  attributeId: string;\n\n  // Character index\n  startIndex: number;\n\n  // Character index\n  endIndex: number;\n}\n\ninterface AnnotatedText {\n  char: string[1];\n  node: any;\n}\n\ninterface Bounds {\n  startIndex: number;\n  endIndex: number;\n}\n\nexport default class Pen {\n  penPosition = { positionType: \"None\" } as PenPosition;\n  query = \"\";\n  isQuerying = false;\n  selection = null as Selection | null;\n  events = new EventEmitter();\n\n  constructor(private root: Root) {\n    this.events.setMaxListeners(1000);\n  }\n\n  get nodeCollection() {\n    return this.root.nodeStore;\n  }\n\n  // --- GETS ---\n\n  getNodeChoices() {\n    if (!this.isQuerying) return wu([]);\n\n    const answer = [] as any;\n    const query = this.query;\n\n    const requiredType = this.getPointedNode().datatype;\n\n    // --- number ---\n\n    const number = Number.parseFloat(this.query);\n    if (!Number.isNaN(number)) {\n      if (\n        requiredType === Primitive.Number ||\n        requiredType === Primitive.Undetermined\n      ) {\n        answer.push({\n          text: number.toString(),\n          addNodeFunction: () => this.nodeCollection.addNumber(number)\n        });\n      } else if (requiredType instanceof Metastruct) {\n        console.log(\"dunno what to do with structs\");\n      } else {\n        console.assert(false, requiredType);\n      }\n      return wu(answer);\n    }\n\n    // --- attributes ---\n\n    const pointedAttribute = this.root.attributeCollection.getAttributeForNode(\n      this.getPointedNode()\n    );\n    const pointedOrganism = this.root.attributeCollection.getOrganismForAttribute(\n      pointedAttribute\n    );\n\n    const ancestors = this.root.organismCollection.getAncestors(\n      pointedOrganism\n    );\n    for (const organism of wu.chain([pointedOrganism], ancestors)) {\n      const attributes = this.root.attributeCollection.getAttributesForOrganism(\n        organism\n      );\n      for (const attribute of attributes.filter(\n        attribute => attribute !== pointedAttribute\n      )) {\n        const nodeChoices = this.getNodeChoicesForAttribute(\n          query,\n          organism,\n          attribute,\n          requiredType\n        );\n        for (const nodeChoice of nodeChoices) {\n          answer.push(nodeChoice);\n        }\n      }\n    }\n\n    // --- functions ---\n\n    for (const metafun of this.root.metafunStore.getFuns()) {\n      const isSubsequence = Functions.isSubsequence(\n        query.toLowerCase(),\n        metafun.name.toLowerCase()\n      );\n      const inputTypesFromOutputType = (metafun as any)\n        ?.inputTypesFromOutputType;\n      const mustBeNumberType = inputTypesFromOutputType === undefined;\n      const validOutputType =\n        inputTypesFromOutputType?.(requiredType) !== undefined;\n      const okNumberType =\n        mustBeNumberType && requiredType === Primitive.Number;\n      const isUndetermined = requiredType === Primitive.Undetermined;\n      const ok =\n        (query === \"\" || isSubsequence) &&\n        (okNumberType || validOutputType || isUndetermined);\n      if (!ok) continue;\n\n      let outputType = requiredType;\n      if (outputType === Primitive.Undetermined) {\n        if (mustBeNumberType) {\n          outputType = Primitive.Number;\n        } else if (\"defaultOutputType\" in metafun) {\n          outputType = metafun.defaultOutputType;\n        } else {\n          console.assert(false, metafun);\n        }\n      }\n      answer.push({\n        text: metafun.name,\n        addNodeFunction: () => this.nodeCollection.addFun(metafun, outputType)\n      });\n    }\n\n    return wu(answer);\n  }\n\n  private *getNodeChoicesForAttribute(\n    query: string,\n    organism,\n    attribute: Attribute,\n    requiredType\n  ) {\n    const isSubsequence = Functions.isSubsequence(\n      query.toLowerCase(),\n      attribute.name.toLowerCase()\n    );\n\n    if (attribute.datatype instanceof Metastruct) {\n      for (let i = 0; i < attribute.datatype.members.length; i++) {\n        const member = attribute.datatype.members[i];\n        console.assert(member.type === Primitive.Number, member);\n\n        const path = `${organism.name}.${attribute.name}.${member.name}`;\n        const isSubsequence = Functions.isSubsequence(\n          query.toLowerCase(),\n          path.toLowerCase()\n        );\n        const ok =\n          (query === \"\" || isSubsequence) && member.type === requiredType;\n        if (ok) {\n          yield {\n            text: path,\n            addNodeFunction: () => this.nodeCollection.addStructMemberReference(attribute.getRootNode(), i)\n          };\n        }\n      }\n    }\n\n    const ok =\n      (query === \"\" || isSubsequence) &&\n      (attribute.datatype === requiredType ||\n        requiredType === Primitive.Undetermined) &&\n      attribute.datatype !== Primitive.Undetermined;\n    if (!ok) return;\n\n    const rootNode = this.root.attributeCollection.getRootNode(attribute);\n    yield {\n      text: `${organism.name}.${attribute.name}`,\n      addNodeFunction: () => this.nodeCollection.addReference(rootNode)\n    };\n  }\n\n  getIsQuerying() {\n    return this.isQuerying;\n  }\n\n  getSerialized() {\n    return {};\n  }\n\n  getQuery() {\n    return this.query;\n  }\n\n  getPenPosition() {\n    return this.penPosition;\n  }\n\n  public getAnnotatedTextForAttribute(attribute: any) {\n    const rootNode = this.root.attributeCollection.getRootNode(attribute);\n    const node = this.root.nodeCollection.getChild(rootNode, 0);\n    return this.getAnnotatedTextForNode(node);\n  }\n\n  getTextForAttribute(attribute: any) {\n    return this.getAnnotatedTextForAttribute(attribute)\n      .map(t => t.char)\n      .join(\"\");\n  }\n\n  getSelection() {\n    return this.selection;\n  }\n\n  private getAnnotatedTextForNode(astNode) {\n    const root = this.root;\n    if (astNode.metaname === \"Number\") {\n      return Pen.textToAnnotatedText(astNode.value.toString(), astNode);\n    } else if (\n      astNode.metaname === \"Struct\" &&\n      astNode.datatype.id === Metastruct.builtinMetastructs.Vector.id\n    ) {\n      console.assert(\n        root.nodeCollection.getChildren(astNode).toArray().length == 2,\n        \"Attribute.vue vector\"\n      );\n      console.assert(astNode);\n      const xNode = root.nodeCollection.getChild(astNode, 0);\n      const yNode = root.nodeCollection.getChild(astNode, 1);\n      let answer = [] as any;\n      answer.push({ char: \"<\", node: astNode });\n      answer = answer.concat(this.getAnnotatedTextForNode(xNode));\n      answer.push({ char: \",\", node: null });\n      answer = answer.concat(this.getAnnotatedTextForNode(yNode));\n      answer.push({ char: \">\", node: null });\n      return answer;\n    } else if (astNode.metaname === \"Reference\") {\n      return Pen.textToAnnotatedText(\n        Pen.referenceToString(astNode, root),\n        astNode\n      );\n    } else if (astNode.metaname === \"Function\") {\n      const funName = Pen.funToString(astNode, root);\n      const children = Array.from(root.nodeCollection.getChildren(astNode));\n      let answer = [] as any;\n      answer = answer.concat(Pen.textToAnnotatedText(funName, astNode));\n      answer.push({ char: \"(\", node: null });\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (i !== 0) {\n          answer.push({ char: \",\", node: null });\n        }\n        answer = answer.concat(this.getAnnotatedTextForNode(child));\n      }\n      answer.push({ char: \")\", node: null });\n      return answer;\n    } else if (astNode.metaname === \"Variable\") {\n      console.error(\"Attribute.vue not expecting Variable\");\n    } else if (astNode.metaname === \"Void\") {\n      return Pen.textToAnnotatedText(\"None\", astNode);\n    } else if(astNode.metaname===\"StructMemberReference\"){\n      return Pen.textToAnnotatedText(Pen.structMemberReferenceToString(astNode), astNode);\n    } else {\n      console.error(\"Attribute.vue Unknown metaname\");\n    }\n  }\n\n  public setPointedNode(node) {\n    const attribute = this.root.attributeCollection.getAttributeForNode(node);\n    const annotatedText = this.getAnnotatedTextForAttribute(attribute);\n    this.selection = Pen.makeSelectionForNode(\n      node,\n      annotatedText,\n      attribute!.id\n    );\n  }\n\n  public getPointedNode() {\n    const selection = this.getSelection();\n    if (selection === null) return null;\n\n    const attribute = this.root.attributeCollection.getAttributeFromId(\n      selection.attributeId\n    );\n    const annotatedText = this.getAnnotatedTextForAttribute(attribute);\n    return annotatedText[selection.startIndex].node;\n  }\n\n  private static referenceToString(referenceNode, root) {\n    const targetNode = root.nodeStore.getTargetNodeForReference(referenceNode);\n    return root.attributeStore.getAttributeForNode(targetNode).name;\n  }\n\n  private static structMemberReferenceToString(node) {\n    const targetNode = Node.getFromId(node.targetVariableNodeId);\n    const memberName = targetNode.datatype.members[node.memberIndex].name;\n    const attributeName = Attribute.getAttributeForNode(targetNode).name;\n    return`${attributeName}.${memberName}`;\n  }\n\n  private static funToString(funNode, root) {\n    const metafun = root.metafunStore.getFromName(funNode.metafunName);\n    return metafun.name;\n  }\n\n  private static textToAnnotatedText(text, astNode) {\n    return text.split(\"\").map(t => ({\n      char: t,\n      node: astNode\n    }));\n  }\n\n  private static getCharBoundsForNode(astNode, annotatedText) {\n    let startIndex = null as null | number;\n    for (let i = 0; i < annotatedText.length; i++) {\n      if (annotatedText[i].node === astNode) {\n        startIndex = i;\n        break;\n      }\n    }\n\n    let endIndex = null as null | number;\n    for (let i = annotatedText.length; i > 0; i--) {\n      if (annotatedText[i - 1].node === astNode) {\n        endIndex = i;\n        break;\n      }\n    }\n    console.assert(startIndex !== null);\n    console.assert(endIndex !== null);\n    return { startIndex, endIndex } as Bounds;\n  }\n\n  // --- ACTIONS ---\n\n  deserialize(store) {\n    Object.assign(this, store);\n  }\n\n  setIsQuerying(isQuerying) {\n    this.isQuerying = isQuerying;\n    if (!isQuerying) {\n      this.setQuery(\"\");\n    }\n  }\n\n  setSelection(selection: Selection | null) {\n    this.selection = this.calcSelection(selection, this.selection);\n  }\n\n  private calcSelection(\n    selection: Selection | null,\n    prevSelection: Selection | null\n  ): Selection | null {\n    if (selection === null) return null;\n\n    const attribute = this.root.attributeCollection.getAttributeFromId(\n      selection.attributeId\n    );\n    const annotatedText = this.getAnnotatedTextForAttribute(attribute);\n    console.assert(selection.startIndex >= 0);\n    console.assert(selection.endIndex <= annotatedText.length);\n\n    if (\n      Pen.didPassOverSingleCharNode(prevSelection, selection, annotatedText)\n    ) {\n      let node;\n      if (Pen.didGoLeft(prevSelection, selection)) {\n        node = annotatedText[selection.startIndex].node;\n        node =\n          node ?? Pen.getNodeToLeftOfChar(selection.startIndex, annotatedText);\n      } else {\n        node = Pen.getNodeToLeftOfChar(selection.startIndex, annotatedText);\n      }\n      return Pen.makeSelectionForNode(\n        node,\n        annotatedText,\n        selection.attributeId\n      );\n    } else {\n      const node = annotatedText[selection.startIndex]?.node ?? null;\n      if (node === null) {\n        if (Pen.didGoLeft(prevSelection, selection)) {\n          const leftNode = Pen.getNodeToLeftOfChar(\n            selection.startIndex,\n            annotatedText\n          );\n          return Pen.makeSelectionForNode(\n            leftNode,\n            annotatedText,\n            selection.attributeId\n          );\n        } else {\n          // Either right or new selection\n          const rightNode = Pen.getNodeToRightOfChar(\n            selection.startIndex,\n            annotatedText\n          );\n          if (rightNode === null) {\n            const leftNode = Pen.getNodeToLeftOfChar(\n              selection.startIndex,\n              annotatedText\n            );\n            return Pen.makeSelectionForNode(\n              leftNode,\n              annotatedText,\n              selection.attributeId\n            );\n          } else {\n            return Pen.makeFrontSelectionForNode(\n              rightNode,\n              annotatedText,\n              selection.attributeId\n            );\n          }\n        }\n      } else {\n        if (Pen.isIndexInsideNode(selection.startIndex, node, annotatedText)) {\n          return Pen.makeSelectionForNode(\n            node,\n            annotatedText,\n            selection.attributeId\n          );\n        } else {\n          return Pen.makeFrontSelectionForNode(\n            node,\n            annotatedText,\n            selection.attributeId\n          );\n        }\n      }\n    }\n  }\n\n  private static didPassOverSingleCharNode(\n    prevSelection: Selection | null,\n    selection: Selection,\n    annotatedText: AnnotatedText[]\n  ) {\n    if (prevSelection === null) return false;\n    if (prevSelection.attributeId !== selection.attributeId) return false;\n\n    const frontIndex = Math.min(selection.startIndex, prevSelection.startIndex);\n    const backIndex = Math.max(selection.startIndex, prevSelection.startIndex);\n    const node = annotatedText[frontIndex].node;\n    if (node === null) return false;\n\n    const prevSingleChar = prevSelection.startIndex === prevSelection.endIndex;\n    const currentSingleChar = selection.startIndex === selection.endIndex;\n\n    const charBoundsForNode = Pen.getCharBoundsForNode(node, annotatedText);\n    const oneCharApart =\n      charBoundsForNode.endIndex - charBoundsForNode.startIndex === 1;\n    const skippedOverNode =\n      frontIndex === charBoundsForNode.startIndex &&\n      backIndex === charBoundsForNode.endIndex;\n\n    return (\n      prevSingleChar && currentSingleChar && oneCharApart && skippedOverNode\n    );\n  }\n\n  private static isIndexInsideNode(charIndex, node, annotatedText) {\n    const charBoundsForNode = Pen.getCharBoundsForNode(node, annotatedText);\n    return (\n      charIndex > charBoundsForNode.startIndex &&\n      charIndex < charBoundsForNode.endIndex\n    );\n  }\n\n  private static didGoLeft(prevSelection, selection) {\n    if (prevSelection === null) return false;\n    if (prevSelection.attributeId !== selection.attributeId) return false;\n    if (selection.startIndex < prevSelection.startIndex) return true;\n    if (selection.startIndex > prevSelection.startIndex) return false;\n    if (selection.endIndex < prevSelection.endIndex) return true;\n    return false;\n  }\n\n  private static getNodeToLeftOfChar(index, annotatedText: AnnotatedText[]) {\n    let node = null;\n    for (let i = index - 1; i >= 0; i--) {\n      node = annotatedText[i].node;\n      if (node !== null) {\n        break;\n      }\n    }\n    return node;\n  }\n\n  private static getNodeToRightOfChar(index, annotatedText: AnnotatedText[]) {\n    let node = null;\n    for (let i = index; i < annotatedText.length; i++) {\n      node = annotatedText[i].node;\n      if (node !== null) {\n        break;\n      }\n    }\n    return node;\n  }\n\n  private static makeSelectionForNode(node, annotatedText, attributeId) {\n    return { ...Pen.getCharBoundsForNode(node, annotatedText), attributeId };\n  }\n\n  private static makeFrontSelectionForNode(node, annotatedText, attributeId) {\n    const charBoundsForNode = Pen.getCharBoundsForNode(node, annotatedText);\n    return {\n      startIndex: charBoundsForNode.startIndex,\n      endIndex: charBoundsForNode.startIndex,\n      attributeId\n    };\n  }\n\n  setQuery(query) {\n    this.query = query;\n  }\n\n  commitNodeChoice(nodeChoice) {\n    const node = nodeChoice.addNodeFunction();\n    const referenceNode = this.getPointedNode();\n    const attribute = this.root.attributeCollection.getAttributeFromId(\n      this.getSelection()!.attributeId\n    ) as Attribute;\n\n    const isUndeterminedAttribute = attribute.datatype === Primitive.Undetermined;\n    if (isUndeterminedAttribute) {\n      console.assert(Node.getChild(attribute.getRootNode(),0).id === referenceNode.id);\n      console.assert(referenceNode.datatype === Primitive.Undetermined, referenceNode);\n    }\n\n    if (this.isCursorInserting() && !isUndeterminedAttribute) {\n      this.nodeCollection.insertNodeAsParent(referenceNode, node);\n    } else {\n      this.nodeCollection.replaceNode(referenceNode, node);\n    }\n\n    if (isUndeterminedAttribute) {\n      attribute.datatype = node.datatype;\n      attribute.getRootNode().datatype = node.datatype;\n    }\n\n    const annotatedText = this.getAnnotatedTextForAttribute(attribute);\n    this.selection = Pen.makeSelectionForNode(\n      node,\n      annotatedText,\n      attribute!.id\n    );\n    this.moveCursorRight();\n    this.moveCursorRight();\n\n    this.events.emit(\"afterPenCommit\");\n  }\n\n  private moveCursorRight() {\n    const selection = this.selection as Selection;\n    const annotatedText = this.getAnnotatedTextForAttribute(\n      this.getSelectedAttribute()\n    );\n    const index = Math.min(selection.endIndex, annotatedText.length);\n    this.setSelection({\n      ...selection,\n      startIndex: index,\n      endIndex: index\n    });\n  }\n\n  tryPromoteSelectionToRoot() {\n    console.assert(!this.getIsQuerying());\n    const node = this.getPointedNode();\n    console.assert(node != null);\n\n    const attribute = this.getSelectedAttribute();\n    const rootNode = this.root.attributeCollection.getRootNode(attribute);\n    if (node.datatype === rootNode.datatype) {\n      this.nodeCollection.reparent({\n        child: node,\n        newParent: rootNode,\n        childIndex: 0\n      });\n      const annotatedText = this.getAnnotatedTextForAttribute(attribute);\n      this.selection = Pen.makeSelectionForNode(\n        node,\n        annotatedText,\n        attribute!.id\n      );\n      this.events.emit(\"afterPenCommit\");\n    }\n  }\n\n  public isCursorInserting(): boolean {\n    const selection = this.getSelection() as Selection;\n    console.assert(selection !== null);\n    const isZeroLengthSelection = selection.startIndex === selection.endIndex;\n    return isZeroLengthSelection;\n  }\n\n  public getSelectedAttribute() {\n    console.assert(this.getSelection() !== null);\n    return this.root.attributeCollection.getAttributeFromId(\n      this.getSelection()!.attributeId\n    );\n  }\n\n  commitFirstNodeChoice() {\n    this.commitNodeChoice(this.getNodeChoices().next().value);\n  }\n}\n"],"mappings":"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","ignoreList":[]}]}