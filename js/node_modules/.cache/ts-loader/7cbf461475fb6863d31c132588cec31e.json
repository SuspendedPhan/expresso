{"remainingRequest":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/babel-loader/lib/index.js!/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/ts-loader/index.js??ref--14-2!/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/eslint-loader/index.js??ref--13-0!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/models/Node.ts","dependencies":[{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/models/Node.ts","mtime":1714946187075},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/babel.config.js","mtime":1714946187052},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/cache-loader/dist/cjs.js","mtime":1714947270264},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/babel-loader/lib/index.js","mtime":1714947394795},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/ts-loader/index.js","mtime":1714947267504},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/eslint-loader/index.js","mtime":1714947270651}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["wu","v4","uuidv4","Root","Collection","Type","Primitive","Attribute","Metastruct","Node","constructor","id","storetype","datatype","fromId","datatypeId","value","getSerialized","nodeParents","serialize","nodes","getParent","node","shouldAssert","undefined","parentRelationship","getUnique","console","assert","getFromId","parentNodeId","getChild","childIndex","ret","getChildMaybe","parentRelationships","getMany","row","find","entry","childNodeId","getChildren","Array","from","sort","a","b","index","length","children","map","nodeId","answer","getParentRelationship","childNode","parentNode","getTargetNodeForReference","referenceNode","targetNodeId","toTree","metaname","target","attribute","root","attributeCollection","getAttributeForNode","name","toArray","child","tree","getFromPath","organismPath","attributeName","nodePath","organism","organismCollection","getOrganismFromPath","getRootNodeFromName","deserialize","store","addNumber","addNode","Number","addVariable","putChild","addStruct","Undetermined","addVoid","addReference","targetNode","addStructMemberReference","targetVariableNode","memberIndex","metastruct","members","type","targetVariableNodeId","addFun","metafun","outputType","_metafun$inputTypesFr","inputTypes","inputTypesFromOutputType","call","hasTypeFun","i","paramCount","metafunName","metastructId","member","eval","add","parent","Error","oldChildRelationships","oldChildRelationship","t","oldChild","remove","relation","delete","reparent","newParent","shouldHaveOldParent","insertNodeAsParent","postChild","postParent","priorRelation","replaceNode","oldNode","newNode","convertToAttribute","oldAttribute","getOrganism","newAttribute","putEditable","rootStore","wordCollection","getRandomWord","variableNode","getRootNode","log","fromTree","subtree","rootNode","key","entries","parts","split","funName","metafunStore","getFromName","parseInt","toTree2","subrootNode","_parentRelationship$c","childTree"],"sources":["/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/eslint-loader/index.js??ref--13-0!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/models/Node.ts"],"sourcesContent":["import wu from \"wu\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Root from \"@/store/Root\";\nimport Functions from \"../code/Functions\";\nimport Collection from \"@/code/Collection\";\nimport Type, { Primitive } from \"./Type\";\nimport Attribute from \"@/models/Attribute\";\nimport Metastruct from \"@/models/Metastruct\";\n\ninterface ParentRelationship {\n  childNodeId: string;\n  parentNodeId: string;\n  childIndex: number;\n}\n\nexport default class Node {\n  public id = uuidv4();\n  public metaname!: string;\n  public storetype = \"node\";\n  public datatypeId!: string;\n\n  public get datatype() {\n    return Type.fromId(this.datatypeId);\n  }\n\n  public set datatype(value) {\n    this.datatypeId = value.id;\n  }\n\n  static nodes = new Collection<any>([], [\"id\"]);\n  static nodeParents = new Collection<ParentRelationship>(\n    [\"parentNodeId\"],\n    [\"childNodeId\"]\n  );\n\n  public static root = Root;\n\n  private constructor() {}\n\n  // --- GETS ---\n\n  static getSerialized() {\n    return {\n      nodeParents: this.nodeParents.serialize(),\n      nodes: this.nodes.serialize()\n    };\n  }\n\n  static getParent(node, shouldAssert = true) {\n    if (shouldAssert === undefined) shouldAssert = true;\n\n    const parentRelationship = this.nodeParents.getUnique(\n      \"childNodeId\",\n      node.id,\n      shouldAssert\n    );\n    if (shouldAssert) {\n      console.assert(parentRelationship as any, \"no parent\");\n    }\n    if (parentRelationship === undefined) {\n      return undefined;\n    } else {\n      return this.getFromId(parentRelationship.parentNodeId);\n    }\n  }\n\n  static getChild(node, childIndex) {\n    const ret = this.getChildMaybe(node, childIndex);\n    console.assert(ret);\n    return ret;\n  }\n\n  static getChildMaybe(node, childIndex) {\n    const parentRelationships = this.nodeParents.getMany(\n      \"parentNodeId\",\n      node.id\n    );\n    const row = wu(parentRelationships).find(\n      entry => entry.childIndex === childIndex\n    ) as ParentRelationship;\n\n    if (row === undefined) {\n      return undefined;\n    } else {\n      return this.getFromId(row.childNodeId);\n    }\n  }\n\n  static getChildren(node) {\n    const parentRelationships = Array.from(\n      this.nodeParents.getMany(\"parentNodeId\", node.id)\n    );\n    parentRelationships.sort((a, b) => a.childIndex - b.childIndex);\n    for (let index = 0; index < parentRelationships.length; index++) {\n      const row = parentRelationships[index];\n      // if(row.childIndex !== index) debugger;\n      console.assert(row.childIndex === index, row);\n    }\n    const children = wu(parentRelationships).map(row =>\n      this.getFromId(row.childNodeId)\n    );\n    return children;\n  }\n\n  static getFromId(nodeId): any {\n    const answer = this.nodes.getUnique(\"id\", nodeId);\n    console.assert(answer, \"cant find node from id\");\n    return answer;\n  }\n\n  static getParentRelationship(childNode, shouldAssert = true) {\n    const row = this.nodeParents.getUnique(\n      \"childNodeId\",\n      childNode.id,\n      shouldAssert\n    );\n    if (!row) {\n      if (shouldAssert) console.assert(row);\n      return null;\n    }\n    return {\n      parentNode: this.getFromId(row.parentNodeId),\n      childIndex: row.childIndex\n    };\n  }\n\n  static getTargetNodeForReference(referenceNode) {\n    const node = this.getFromId(referenceNode.targetNodeId);\n    console.assert(node);\n    return node;\n  }\n\n  static toTree(node) {\n    if (node.metaname === \"Number\") {\n      return node.value;\n    } else if (node.metaname === \"Reference\") {\n      const target = this.getTargetNodeForReference(node);\n      const attribute = this.root.attributeCollection.getAttributeForNode(\n        target\n      );\n      return `Reference ${attribute!.name}`;\n    }\n\n    const children = this.getChildren(node).toArray();\n    if (children.length === 1) {\n      const child = children[0];\n      if (child.metaname === \"Number\" || child.metaname === \"Reference\") {\n        return this.toTree(child);\n      }\n    }\n\n    const tree = {};\n    for (const child of children) {\n      tree[child.metaname] = this.toTree(child);\n    }\n    return tree;\n  }\n\n  /**\n   * @param nodePath [] returns the Var root\n   */\n  static getFromPath(\n    organismPath: string[],\n    attributeName,\n    nodePath: number[] = []\n  ) {\n    const organism = this.root.organismCollection.getOrganismFromPath(\n      ...organismPath\n    );\n    let node = this.root.attributeCollection.getRootNodeFromName(\n      organism,\n      attributeName\n    );\n    for (const childIndex of nodePath) {\n      node = this.getChild(node, childIndex);\n    }\n    console.assert(node);\n    return node;\n  }\n\n  // --- ACTIONS ---\n\n  static deserialize(store) {\n    this.nodeParents.deserialize(store.nodeParents);\n    this.nodes.deserialize(store.nodes, Node);\n  }\n\n  static addNumber(value) {\n    const answer = this.addNode(\"Number\", Primitive.Number) as any;\n    answer.value = value;\n    return answer;\n  }\n\n  static addVariable(datatype = Primitive.Number as Type) {\n    const answer = this.addNode(\"Variable\", datatype) as any;\n    if (datatype === Primitive.Number) {\n      this.putChild(answer, 0, this.addNumber(0));\n    } else if (datatype instanceof Metastruct) {\n      this.putChild(answer, 0, this.addStruct(datatype));\n    } else if (datatype === Primitive.Undetermined) {\n      this.putChild(answer, 0, this.addVoid());\n    } else {\n      console.assert(false);\n    }\n    return answer;\n  }\n\n  static addReference(targetNode) {\n    console.assert(targetNode.datatype !== Primitive.Undetermined);\n    const answer = this.addNode(\"Reference\", targetNode.datatype) as any;\n    answer.targetNodeId = targetNode.id;\n    return answer;\n  }\n\n  static addStructMemberReference(targetVariableNode, memberIndex) {\n    // attribute -> variable -> struct -> member\n\n    const metastruct = targetVariableNode.datatype;\n    const datatype = metastruct.members[memberIndex].type;\n\n    console.assert(targetVariableNode.datatype !== Primitive.Undetermined);\n    const answer = this.addNode(\"StructMemberReference\", datatype) as any;\n    answer.targetVariableNodeId = targetVariableNode.id;\n    answer.memberIndex = memberIndex;\n    return answer;\n  }\n\n  static addFun(metafun, outputType = Primitive.Number) {\n    const answer = this.addNode(\"Function\", outputType) as any;\n    const inputTypes = metafun.inputTypesFromOutputType?.(outputType);\n    const hasTypeFun = metafun.inputTypesFromOutputType !== undefined;\n    console.assert(!hasTypeFun || inputTypes !== undefined);\n\n    for (let i = 0; i < metafun.paramCount; i++) {\n      if (inputTypes === undefined || inputTypes[i] === Primitive.Number) {\n        this.putChild(answer, i, this.addNumber(0));\n      } else if (inputTypes[i] instanceof Metastruct) {\n        this.putChild(answer, i, this.addStruct(inputTypes[i]));\n      } else {\n        console.assert(false, inputTypes[i]);\n      }\n    }\n\n    answer.metafunName = metafun.name;\n    return answer;\n  }\n\n  static addStruct(metastruct: Metastruct) {\n    const answer = this.addNode(\"Struct\", metastruct) as any;\n    answer.metastructId = metastruct.id;\n    for (let i = 0; i < metastruct.members.length; i++) {\n      const member = metastruct.members[i];\n      if (member.type === Primitive.Number) {\n        this.putChild(answer, i, this.addNumber(0));\n      } else if (member.type instanceof Metastruct) {\n        this.putChild(answer, i, this.addStruct(member.type));\n      } else {\n        console.assert(false);\n      }\n    }\n    return answer;\n  }\n\n  private static addVoid() {\n    const ret = this.addNode(\"Void\", Primitive.Undetermined) as any;\n    ret.eval = () => undefined;\n    return ret;\n  }\n\n  static addNode(metaname, datatype: Type) {\n    const answer = new Node();\n    answer.metaname = metaname;\n    answer.datatypeId = datatype.id;\n    this.nodes.add(answer);\n    return answer;\n  }\n\n  static putChild(parent, childIndex: number, child) {\n    console.assert(child);\n\n    // check child doesn't already have parent\n    if (\n      wu(this.nodeParents).find(row => row.childNodeId === child.id) !==\n      undefined\n    ) {\n      throw new Error();\n    }\n\n    const oldChildRelationships = this.nodeParents.getMany(\n      \"parentNodeId\",\n      parent.id\n    );\n    const oldChildRelationship = oldChildRelationships.find(\n      t => t.childIndex === childIndex\n    );\n\n    if (oldChildRelationship !== undefined) {\n      const oldChild = this.getFromId(oldChildRelationship.childNodeId);\n      this.remove(oldChild);\n    }\n\n    for (const parentRelationship of this.nodeParents) {\n      console.assert(\n        !(\n          parentRelationship.parentNodeId === parent.id &&\n          parentRelationship.childIndex === childIndex\n        )\n      );\n    }\n    this.nodeParents.add({\n      childNodeId: child.id,\n      parentNodeId: parent.id,\n      childIndex: childIndex\n    });\n    console.assert(parent.id);\n    console.assert(child.id);\n    console.assert(childIndex !== undefined);\n    return child;\n  }\n\n  static remove(node, shouldAssert = true) {\n    for (const child of this.getChildren(node)) {\n      this.remove(child, shouldAssert);\n    }\n    const relation = this.nodeParents.getUnique(\n      \"childNodeId\",\n      node.id,\n      shouldAssert\n    );\n    if (relation) {\n      this.nodeParents.delete(relation);\n    }\n    this.nodes.delete(node);\n  }\n\n  /**\n   * Detaches the child from its old parent, and puts it under the new parent.\n   */\n  static reparent(\n    { child, newParent, childIndex },\n    shouldHaveOldParent = true\n  ) {\n    const relation = this.nodeParents.getUnique(\n      \"childNodeId\",\n      child.id,\n      shouldHaveOldParent\n    );\n    if (relation !== undefined) {\n      this.nodeParents.delete(relation);\n    }\n    this.putChild(newParent, childIndex, child);\n  }\n\n  static insertNodeAsParent(postChild, postParent) {\n    const priorRelation = this.getParentRelationship(postChild);\n    if (priorRelation) {\n      const { childIndex, parentNode } = priorRelation;\n      // move old under new\n      this.reparent({\n        child: postChild,\n        newParent: postParent,\n        childIndex: 0\n      });\n\n      // move new under old root\n      this.reparent(\n        {\n          child: postParent,\n          newParent: parentNode,\n          childIndex: childIndex\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * Removes oldNode and its children from the tree, putting newNode in its place.\n   */\n  static replaceNode(oldNode, newNode) {\n    const parentRelationship = this.getParentRelationship(oldNode);\n    console.assert(parentRelationship !== undefined);\n    if (parentRelationship) {\n      const { childIndex, parentNode } = parentRelationship;\n      this.putChild(parentNode, childIndex, newNode);\n    }\n  }\n\n  static convertToAttribute(node) {\n    if (node === null) return;\n\n    const oldAttribute = Attribute.getAttributeForNode(node);\n    const organism = oldAttribute.getOrganism();\n    const newAttribute = Attribute.putEditable(\n      organism,\n      Attribute.rootStore.wordCollection.getRandomWord(),\n      node.datatype\n    );\n\n    const parentRelationship = this.getParentRelationship(node);\n    const parentNode = parentRelationship!.parentNode;\n    const variableNode = newAttribute.getRootNode();\n    const referenceNode = this.addReference(variableNode);\n    this.reparent({ child: node, newParent: variableNode, childIndex: 0 });\n    this.putChild(parentNode, parentRelationship!.childIndex, referenceNode);\n    console.log(\"done\");\n  }\n\n  static fromTree(subtree, parentNode = undefined): any {\n    let rootNode = null;\n\n    for (const [key, value] of wu.entries(subtree)) {\n      const parts = key.split(\" \");\n      const [index, metaname] = parts;\n      if (metaname === \"Function\") {\n        const funName = parts[2];\n\n        const node = this.addFun(this.root.metafunStore.getFromName(funName));\n\n        if (parentNode) {\n          this.putChild(parentNode, Number.parseInt(index), node);\n        }\n\n        if (!parentNode) {\n          rootNode = node;\n        }\n\n        this.fromTree(value, node);\n      } else if (metaname === \"Number\") {\n        const node = this.addNumber(value);\n        if (parentNode) {\n          this.putChild(parentNode, Number.parseInt(index), node);\n        }\n      }\n    }\n\n    return rootNode;\n  }\n\n  static toTree2(subrootNode, subtree = {}) {\n    const parentRelationship = this.getParentRelationship(subrootNode, false);\n    const childIndex = parentRelationship?.childIndex ?? 0;\n\n    if (subrootNode.metaname === \"Function\") {\n      const childTree = {};\n      // childTree.metadata = subrootNode;\n\n      subtree[\n        `${childIndex} ${subrootNode.metaname} ${subrootNode.metafunName}`\n      ] = childTree;\n      for (const childNode of this.getChildren(subrootNode)) {\n        this.toTree2(childNode, childTree);\n      }\n    } else if (subrootNode.metaname === \"Number\") {\n      // subtree[`${childIndex} ${subrootNode.metaname}`] = subrootNode;\n      subtree[`${childIndex} ${subrootNode.metaname}`] = subrootNode.value;\n    } else if (\n      subrootNode.metaname === \"Variable\" ||\n      subrootNode.metaname === \"Struct\"\n    ) {\n      const childTree = {};\n      // childTree.metadata = subrootNode;\n\n      subtree[`${childIndex} ${subrootNode.metaname}`] = childTree;\n      for (const childNode of this.getChildren(subrootNode)) {\n        this.toTree2(childNode, childTree);\n      }\n    }\n\n    return subtree;\n  }\n}\n"],"mappings":";AAAA,OAAOA,EAAE,MAAM,IAAI;AACnB,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,OAAOC,IAAI,MAAM,cAAc;AAE/B,OAAOC,UAAU,MAAM,mBAAmB;AAC1C,OAAOC,IAAI,IAAIC,SAAS,QAAQ,QAAQ;AACxC,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,UAAU,MAAM,qBAAqB;AAQ5C,eAAc,MAAOC,IAAI;EAsBvBC,YAAA;IArBO,KAAAC,EAAE,GAAGT,MAAM,EAAE;IAEb,KAAAU,SAAS,GAAG,MAAM;EAmBF;EAhBvB,IAAWC,QAAQA,CAAA;IACjB,OAAOR,IAAI,CAACS,MAAM,CAAC,IAAI,CAACC,UAAU,CAAC;EACrC;EAEA,IAAWF,QAAQA,CAACG,KAAK;IACvB,IAAI,CAACD,UAAU,GAAGC,KAAK,CAACL,EAAE;EAC5B;EAYA;EAEA,OAAOM,aAAaA,CAAA;IAClB,OAAO;MACLC,WAAW,EAAE,IAAI,CAACA,WAAW,CAACC,SAAS,EAAE;MACzCC,KAAK,EAAE,IAAI,CAACA,KAAK,CAACD,SAAS;KAC5B;EACH;EAEA,OAAOE,SAASA,CAACC,IAAI,EAAEC,YAAY,GAAG,IAAI;IACxC,IAAIA,YAAY,KAAKC,SAAS,EAAED,YAAY,GAAG,IAAI;IAEnD,MAAME,kBAAkB,GAAG,IAAI,CAACP,WAAW,CAACQ,SAAS,CACnD,aAAa,EACbJ,IAAI,CAACX,EAAE,EACPY,YAAY,CACb;IACD,IAAIA,YAAY,EAAE;MAChBI,OAAO,CAACC,MAAM,CAACH,kBAAyB,EAAE,WAAW,CAAC;;IAExD,IAAIA,kBAAkB,KAAKD,SAAS,EAAE;MACpC,OAAOA,SAAS;KACjB,MAAM;MACL,OAAO,IAAI,CAACK,SAAS,CAACJ,kBAAkB,CAACK,YAAY,CAAC;;EAE1D;EAEA,OAAOC,QAAQA,CAACT,IAAI,EAAEU,UAAU;IAC9B,MAAMC,GAAG,GAAG,IAAI,CAACC,aAAa,CAACZ,IAAI,EAAEU,UAAU,CAAC;IAChDL,OAAO,CAACC,MAAM,CAACK,GAAG,CAAC;IACnB,OAAOA,GAAG;EACZ;EAEA,OAAOC,aAAaA,CAACZ,IAAI,EAAEU,UAAU;IACnC,MAAMG,mBAAmB,GAAG,IAAI,CAACjB,WAAW,CAACkB,OAAO,CAClD,cAAc,EACdd,IAAI,CAACX,EAAE,CACR;IACD,MAAM0B,GAAG,GAAGrC,EAAE,CAACmC,mBAAmB,CAAC,CAACG,IAAI,CACtCC,KAAK,IAAIA,KAAK,CAACP,UAAU,KAAKA,UAAU,CACnB;IAEvB,IAAIK,GAAG,KAAKb,SAAS,EAAE;MACrB,OAAOA,SAAS;KACjB,MAAM;MACL,OAAO,IAAI,CAACK,SAAS,CAACQ,GAAG,CAACG,WAAW,CAAC;;EAE1C;EAEA,OAAOC,WAAWA,CAACnB,IAAI;IACrB,MAAMa,mBAAmB,GAAGO,KAAK,CAACC,IAAI,CACpC,IAAI,CAACzB,WAAW,CAACkB,OAAO,CAAC,cAAc,EAAEd,IAAI,CAACX,EAAE,CAAC,CAClD;IACDwB,mBAAmB,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACb,UAAU,GAAGc,CAAC,CAACd,UAAU,CAAC;IAC/D,KAAK,IAAIe,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGZ,mBAAmB,CAACa,MAAM,EAAED,KAAK,EAAE,EAAE;MAC/D,MAAMV,GAAG,GAAGF,mBAAmB,CAACY,KAAK,CAAC;MACtC;MACApB,OAAO,CAACC,MAAM,CAACS,GAAG,CAACL,UAAU,KAAKe,KAAK,EAAEV,GAAG,CAAC;;IAE/C,MAAMY,QAAQ,GAAGjD,EAAE,CAACmC,mBAAmB,CAAC,CAACe,GAAG,CAACb,GAAG,IAC9C,IAAI,CAACR,SAAS,CAACQ,GAAG,CAACG,WAAW,CAAC,CAChC;IACD,OAAOS,QAAQ;EACjB;EAEA,OAAOpB,SAASA,CAACsB,MAAM;IACrB,MAAMC,MAAM,GAAG,IAAI,CAAChC,KAAK,CAACM,SAAS,CAAC,IAAI,EAAEyB,MAAM,CAAC;IACjDxB,OAAO,CAACC,MAAM,CAACwB,MAAM,EAAE,wBAAwB,CAAC;IAChD,OAAOA,MAAM;EACf;EAEA,OAAOC,qBAAqBA,CAACC,SAAS,EAAE/B,YAAY,GAAG,IAAI;IACzD,MAAMc,GAAG,GAAG,IAAI,CAACnB,WAAW,CAACQ,SAAS,CACpC,aAAa,EACb4B,SAAS,CAAC3C,EAAE,EACZY,YAAY,CACb;IACD,IAAI,CAACc,GAAG,EAAE;MACR,IAAId,YAAY,EAAEI,OAAO,CAACC,MAAM,CAACS,GAAG,CAAC;MACrC,OAAO,IAAI;;IAEb,OAAO;MACLkB,UAAU,EAAE,IAAI,CAAC1B,SAAS,CAACQ,GAAG,CAACP,YAAY,CAAC;MAC5CE,UAAU,EAAEK,GAAG,CAACL;KACjB;EACH;EAEA,OAAOwB,yBAAyBA,CAACC,aAAa;IAC5C,MAAMnC,IAAI,GAAG,IAAI,CAACO,SAAS,CAAC4B,aAAa,CAACC,YAAY,CAAC;IACvD/B,OAAO,CAACC,MAAM,CAACN,IAAI,CAAC;IACpB,OAAOA,IAAI;EACb;EAEA,OAAOqC,MAAMA,CAACrC,IAAI;IAChB,IAAIA,IAAI,CAACsC,QAAQ,KAAK,QAAQ,EAAE;MAC9B,OAAOtC,IAAI,CAACN,KAAK;KAClB,MAAM,IAAIM,IAAI,CAACsC,QAAQ,KAAK,WAAW,EAAE;MACxC,MAAMC,MAAM,GAAG,IAAI,CAACL,yBAAyB,CAAClC,IAAI,CAAC;MACnD,MAAMwC,SAAS,GAAG,IAAI,CAACC,IAAI,CAACC,mBAAmB,CAACC,mBAAmB,CACjEJ,MAAM,CACP;MACD,OAAO,aAAaC,SAAU,CAACI,IAAI,EAAE;;IAGvC,MAAMjB,QAAQ,GAAG,IAAI,CAACR,WAAW,CAACnB,IAAI,CAAC,CAAC6C,OAAO,EAAE;IACjD,IAAIlB,QAAQ,CAACD,MAAM,KAAK,CAAC,EAAE;MACzB,MAAMoB,KAAK,GAAGnB,QAAQ,CAAC,CAAC,CAAC;MACzB,IAAImB,KAAK,CAACR,QAAQ,KAAK,QAAQ,IAAIQ,KAAK,CAACR,QAAQ,KAAK,WAAW,EAAE;QACjE,OAAO,IAAI,CAACD,MAAM,CAACS,KAAK,CAAC;;;IAI7B,MAAMC,IAAI,GAAG,EAAE;IACf,KAAK,MAAMD,KAAK,IAAInB,QAAQ,EAAE;MAC5BoB,IAAI,CAACD,KAAK,CAACR,QAAQ,CAAC,GAAG,IAAI,CAACD,MAAM,CAACS,KAAK,CAAC;;IAE3C,OAAOC,IAAI;EACb;EAEA;;;EAGA,OAAOC,WAAWA,CAChBC,YAAsB,EACtBC,aAAa,EACbC,QAAA,GAAqB,EAAE;IAEvB,MAAMC,QAAQ,GAAG,IAAI,CAACX,IAAI,CAACY,kBAAkB,CAACC,mBAAmB,CAC/D,GAAGL,YAAY,CAChB;IACD,IAAIjD,IAAI,GAAG,IAAI,CAACyC,IAAI,CAACC,mBAAmB,CAACa,mBAAmB,CAC1DH,QAAQ,EACRF,aAAa,CACd;IACD,KAAK,MAAMxC,UAAU,IAAIyC,QAAQ,EAAE;MACjCnD,IAAI,GAAG,IAAI,CAACS,QAAQ,CAACT,IAAI,EAAEU,UAAU,CAAC;;IAExCL,OAAO,CAACC,MAAM,CAACN,IAAI,CAAC;IACpB,OAAOA,IAAI;EACb;EAEA;EAEA,OAAOwD,WAAWA,CAACC,KAAK;IACtB,IAAI,CAAC7D,WAAW,CAAC4D,WAAW,CAACC,KAAK,CAAC7D,WAAW,CAAC;IAC/C,IAAI,CAACE,KAAK,CAAC0D,WAAW,CAACC,KAAK,CAAC3D,KAAK,EAAEX,IAAI,CAAC;EAC3C;EAEA,OAAOuE,SAASA,CAAChE,KAAK;IACpB,MAAMoC,MAAM,GAAG,IAAI,CAAC6B,OAAO,CAAC,QAAQ,EAAE3E,SAAS,CAAC4E,MAAM,CAAQ;IAC9D9B,MAAM,CAACpC,KAAK,GAAGA,KAAK;IACpB,OAAOoC,MAAM;EACf;EAEA,OAAO+B,WAAWA,CAACtE,QAAA,GAAWP,SAAS,CAAC4E,MAAc;IACpD,MAAM9B,MAAM,GAAG,IAAI,CAAC6B,OAAO,CAAC,UAAU,EAAEpE,QAAQ,CAAQ;IACxD,IAAIA,QAAQ,KAAKP,SAAS,CAAC4E,MAAM,EAAE;MACjC,IAAI,CAACE,QAAQ,CAAChC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC4B,SAAS,CAAC,CAAC,CAAC,CAAC;KAC5C,MAAM,IAAInE,QAAQ,YAAYL,UAAU,EAAE;MACzC,IAAI,CAAC4E,QAAQ,CAAChC,MAAM,EAAE,CAAC,EAAE,IAAI,CAACiC,SAAS,CAACxE,QAAQ,CAAC,CAAC;KACnD,MAAM,IAAIA,QAAQ,KAAKP,SAAS,CAACgF,YAAY,EAAE;MAC9C,IAAI,CAACF,QAAQ,CAAChC,MAAM,EAAE,CAAC,EAAE,IAAI,CAACmC,OAAO,EAAE,CAAC;KACzC,MAAM;MACL5D,OAAO,CAACC,MAAM,CAAC,KAAK,CAAC;;IAEvB,OAAOwB,MAAM;EACf;EAEA,OAAOoC,YAAYA,CAACC,UAAU;IAC5B9D,OAAO,CAACC,MAAM,CAAC6D,UAAU,CAAC5E,QAAQ,KAAKP,SAAS,CAACgF,YAAY,CAAC;IAC9D,MAAMlC,MAAM,GAAG,IAAI,CAAC6B,OAAO,CAAC,WAAW,EAAEQ,UAAU,CAAC5E,QAAQ,CAAQ;IACpEuC,MAAM,CAACM,YAAY,GAAG+B,UAAU,CAAC9E,EAAE;IACnC,OAAOyC,MAAM;EACf;EAEA,OAAOsC,wBAAwBA,CAACC,kBAAkB,EAAEC,WAAW;IAC7D;IAEA,MAAMC,UAAU,GAAGF,kBAAkB,CAAC9E,QAAQ;IAC9C,MAAMA,QAAQ,GAAGgF,UAAU,CAACC,OAAO,CAACF,WAAW,CAAC,CAACG,IAAI;IAErDpE,OAAO,CAACC,MAAM,CAAC+D,kBAAkB,CAAC9E,QAAQ,KAAKP,SAAS,CAACgF,YAAY,CAAC;IACtE,MAAMlC,MAAM,GAAG,IAAI,CAAC6B,OAAO,CAAC,uBAAuB,EAAEpE,QAAQ,CAAQ;IACrEuC,MAAM,CAAC4C,oBAAoB,GAAGL,kBAAkB,CAAChF,EAAE;IACnDyC,MAAM,CAACwC,WAAW,GAAGA,WAAW;IAChC,OAAOxC,MAAM;EACf;EAEA,OAAO6C,MAAMA,CAACC,OAAO,EAAEC,UAAU,GAAG7F,SAAS,CAAC4E,MAAM;IAAA,IAAAkB,qBAAA;IAClD,MAAMhD,MAAM,GAAG,IAAI,CAAC6B,OAAO,CAAC,UAAU,EAAEkB,UAAU,CAAQ;IAC1D,MAAME,UAAU,IAAAD,qBAAA,GAAGF,OAAO,CAACI,wBAAwB,cAAAF,qBAAA,uBAAhCA,qBAAA,CAAAG,IAAA,CAAAL,OAAO,EAA4BC,UAAU,CAAC;IACjE,MAAMK,UAAU,GAAGN,OAAO,CAACI,wBAAwB,KAAK9E,SAAS;IACjEG,OAAO,CAACC,MAAM,CAAC,CAAC4E,UAAU,IAAIH,UAAU,KAAK7E,SAAS,CAAC;IAEvD,KAAK,IAAIiF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,OAAO,CAACQ,UAAU,EAAED,CAAC,EAAE,EAAE;MAC3C,IAAIJ,UAAU,KAAK7E,SAAS,IAAI6E,UAAU,CAACI,CAAC,CAAC,KAAKnG,SAAS,CAAC4E,MAAM,EAAE;QAClE,IAAI,CAACE,QAAQ,CAAChC,MAAM,EAAEqD,CAAC,EAAE,IAAI,CAACzB,SAAS,CAAC,CAAC,CAAC,CAAC;OAC5C,MAAM,IAAIqB,UAAU,CAACI,CAAC,CAAC,YAAYjG,UAAU,EAAE;QAC9C,IAAI,CAAC4E,QAAQ,CAAChC,MAAM,EAAEqD,CAAC,EAAE,IAAI,CAACpB,SAAS,CAACgB,UAAU,CAACI,CAAC,CAAC,CAAC,CAAC;OACxD,MAAM;QACL9E,OAAO,CAACC,MAAM,CAAC,KAAK,EAAEyE,UAAU,CAACI,CAAC,CAAC,CAAC;;;IAIxCrD,MAAM,CAACuD,WAAW,GAAGT,OAAO,CAAChC,IAAI;IACjC,OAAOd,MAAM;EACf;EAEA,OAAOiC,SAASA,CAACQ,UAAsB;IACrC,MAAMzC,MAAM,GAAG,IAAI,CAAC6B,OAAO,CAAC,QAAQ,EAAEY,UAAU,CAAQ;IACxDzC,MAAM,CAACwD,YAAY,GAAGf,UAAU,CAAClF,EAAE;IACnC,KAAK,IAAI8F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,UAAU,CAACC,OAAO,CAAC9C,MAAM,EAAEyD,CAAC,EAAE,EAAE;MAClD,MAAMI,MAAM,GAAGhB,UAAU,CAACC,OAAO,CAACW,CAAC,CAAC;MACpC,IAAII,MAAM,CAACd,IAAI,KAAKzF,SAAS,CAAC4E,MAAM,EAAE;QACpC,IAAI,CAACE,QAAQ,CAAChC,MAAM,EAAEqD,CAAC,EAAE,IAAI,CAACzB,SAAS,CAAC,CAAC,CAAC,CAAC;OAC5C,MAAM,IAAI6B,MAAM,CAACd,IAAI,YAAYvF,UAAU,EAAE;QAC5C,IAAI,CAAC4E,QAAQ,CAAChC,MAAM,EAAEqD,CAAC,EAAE,IAAI,CAACpB,SAAS,CAACwB,MAAM,CAACd,IAAI,CAAC,CAAC;OACtD,MAAM;QACLpE,OAAO,CAACC,MAAM,CAAC,KAAK,CAAC;;;IAGzB,OAAOwB,MAAM;EACf;EAEQ,OAAOmC,OAAOA,CAAA;IACpB,MAAMtD,GAAG,GAAG,IAAI,CAACgD,OAAO,CAAC,MAAM,EAAE3E,SAAS,CAACgF,YAAY,CAAQ;IAC/DrD,GAAG,CAAC6E,IAAI,GAAG,MAAMtF,SAAS;IAC1B,OAAOS,GAAG;EACZ;EAEA,OAAOgD,OAAOA,CAACrB,QAAQ,EAAE/C,QAAc;IACrC,MAAMuC,MAAM,GAAG,IAAI3C,IAAI,EAAE;IACzB2C,MAAM,CAACQ,QAAQ,GAAGA,QAAQ;IAC1BR,MAAM,CAACrC,UAAU,GAAGF,QAAQ,CAACF,EAAE;IAC/B,IAAI,CAACS,KAAK,CAAC2F,GAAG,CAAC3D,MAAM,CAAC;IACtB,OAAOA,MAAM;EACf;EAEA,OAAOgC,QAAQA,CAAC4B,MAAM,EAAEhF,UAAkB,EAAEoC,KAAK;IAC/CzC,OAAO,CAACC,MAAM,CAACwC,KAAK,CAAC;IAErB;IACA,IACEpE,EAAE,CAAC,IAAI,CAACkB,WAAW,CAAC,CAACoB,IAAI,CAACD,GAAG,IAAIA,GAAG,CAACG,WAAW,KAAK4B,KAAK,CAACzD,EAAE,CAAC,KAC9Da,SAAS,EACT;MACA,MAAM,IAAIyF,KAAK,EAAE;;IAGnB,MAAMC,qBAAqB,GAAG,IAAI,CAAChG,WAAW,CAACkB,OAAO,CACpD,cAAc,EACd4E,MAAM,CAACrG,EAAE,CACV;IACD,MAAMwG,oBAAoB,GAAGD,qBAAqB,CAAC5E,IAAI,CACrD8E,CAAC,IAAIA,CAAC,CAACpF,UAAU,KAAKA,UAAU,CACjC;IAED,IAAImF,oBAAoB,KAAK3F,SAAS,EAAE;MACtC,MAAM6F,QAAQ,GAAG,IAAI,CAACxF,SAAS,CAACsF,oBAAoB,CAAC3E,WAAW,CAAC;MACjE,IAAI,CAAC8E,MAAM,CAACD,QAAQ,CAAC;;IAGvB,KAAK,MAAM5F,kBAAkB,IAAI,IAAI,CAACP,WAAW,EAAE;MACjDS,OAAO,CAACC,MAAM,CACZ,EACEH,kBAAkB,CAACK,YAAY,KAAKkF,MAAM,CAACrG,EAAE,IAC7Cc,kBAAkB,CAACO,UAAU,KAAKA,UAAU,CAC7C,CACF;;IAEH,IAAI,CAACd,WAAW,CAAC6F,GAAG,CAAC;MACnBvE,WAAW,EAAE4B,KAAK,CAACzD,EAAE;MACrBmB,YAAY,EAAEkF,MAAM,CAACrG,EAAE;MACvBqB,UAAU,EAAEA;KACb,CAAC;IACFL,OAAO,CAACC,MAAM,CAACoF,MAAM,CAACrG,EAAE,CAAC;IACzBgB,OAAO,CAACC,MAAM,CAACwC,KAAK,CAACzD,EAAE,CAAC;IACxBgB,OAAO,CAACC,MAAM,CAACI,UAAU,KAAKR,SAAS,CAAC;IACxC,OAAO4C,KAAK;EACd;EAEA,OAAOkD,MAAMA,CAAChG,IAAI,EAAEC,YAAY,GAAG,IAAI;IACrC,KAAK,MAAM6C,KAAK,IAAI,IAAI,CAAC3B,WAAW,CAACnB,IAAI,CAAC,EAAE;MAC1C,IAAI,CAACgG,MAAM,CAAClD,KAAK,EAAE7C,YAAY,CAAC;;IAElC,MAAMgG,QAAQ,GAAG,IAAI,CAACrG,WAAW,CAACQ,SAAS,CACzC,aAAa,EACbJ,IAAI,CAACX,EAAE,EACPY,YAAY,CACb;IACD,IAAIgG,QAAQ,EAAE;MACZ,IAAI,CAACrG,WAAW,CAACsG,MAAM,CAACD,QAAQ,CAAC;;IAEnC,IAAI,CAACnG,KAAK,CAACoG,MAAM,CAAClG,IAAI,CAAC;EACzB;EAEA;;;EAGA,OAAOmG,QAAQA,CACb;IAAErD,KAAK;IAAEsD,SAAS;IAAE1F;EAAU,CAAE,EAChC2F,mBAAmB,GAAG,IAAI;IAE1B,MAAMJ,QAAQ,GAAG,IAAI,CAACrG,WAAW,CAACQ,SAAS,CACzC,aAAa,EACb0C,KAAK,CAACzD,EAAE,EACRgH,mBAAmB,CACpB;IACD,IAAIJ,QAAQ,KAAK/F,SAAS,EAAE;MAC1B,IAAI,CAACN,WAAW,CAACsG,MAAM,CAACD,QAAQ,CAAC;;IAEnC,IAAI,CAACnC,QAAQ,CAACsC,SAAS,EAAE1F,UAAU,EAAEoC,KAAK,CAAC;EAC7C;EAEA,OAAOwD,kBAAkBA,CAACC,SAAS,EAAEC,UAAU;IAC7C,MAAMC,aAAa,GAAG,IAAI,CAAC1E,qBAAqB,CAACwE,SAAS,CAAC;IAC3D,IAAIE,aAAa,EAAE;MACjB,MAAM;QAAE/F,UAAU;QAAEuB;MAAU,CAAE,GAAGwE,aAAa;MAChD;MACA,IAAI,CAACN,QAAQ,CAAC;QACZrD,KAAK,EAAEyD,SAAS;QAChBH,SAAS,EAAEI,UAAU;QACrB9F,UAAU,EAAE;OACb,CAAC;MAEF;MACA,IAAI,CAACyF,QAAQ,CACX;QACErD,KAAK,EAAE0D,UAAU;QACjBJ,SAAS,EAAEnE,UAAU;QACrBvB,UAAU,EAAEA;OACb,EACD,KAAK,CACN;;EAEL;EAEA;;;EAGA,OAAOgG,WAAWA,CAACC,OAAO,EAAEC,OAAO;IACjC,MAAMzG,kBAAkB,GAAG,IAAI,CAAC4B,qBAAqB,CAAC4E,OAAO,CAAC;IAC9DtG,OAAO,CAACC,MAAM,CAACH,kBAAkB,KAAKD,SAAS,CAAC;IAChD,IAAIC,kBAAkB,EAAE;MACtB,MAAM;QAAEO,UAAU;QAAEuB;MAAU,CAAE,GAAG9B,kBAAkB;MACrD,IAAI,CAAC2D,QAAQ,CAAC7B,UAAU,EAAEvB,UAAU,EAAEkG,OAAO,CAAC;;EAElD;EAEA,OAAOC,kBAAkBA,CAAC7G,IAAI;IAC5B,IAAIA,IAAI,KAAK,IAAI,EAAE;IAEnB,MAAM8G,YAAY,GAAG7H,SAAS,CAAC0D,mBAAmB,CAAC3C,IAAI,CAAC;IACxD,MAAMoD,QAAQ,GAAG0D,YAAY,CAACC,WAAW,EAAE;IAC3C,MAAMC,YAAY,GAAG/H,SAAS,CAACgI,WAAW,CACxC7D,QAAQ,EACRnE,SAAS,CAACiI,SAAS,CAACC,cAAc,CAACC,aAAa,EAAE,EAClDpH,IAAI,CAACT,QAAQ,CACd;IAED,MAAMY,kBAAkB,GAAG,IAAI,CAAC4B,qBAAqB,CAAC/B,IAAI,CAAC;IAC3D,MAAMiC,UAAU,GAAG9B,kBAAmB,CAAC8B,UAAU;IACjD,MAAMoF,YAAY,GAAGL,YAAY,CAACM,WAAW,EAAE;IAC/C,MAAMnF,aAAa,GAAG,IAAI,CAAC+B,YAAY,CAACmD,YAAY,CAAC;IACrD,IAAI,CAAClB,QAAQ,CAAC;MAAErD,KAAK,EAAE9C,IAAI;MAAEoG,SAAS,EAAEiB,YAAY;MAAE3G,UAAU,EAAE;IAAC,CAAE,CAAC;IACtE,IAAI,CAACoD,QAAQ,CAAC7B,UAAU,EAAE9B,kBAAmB,CAACO,UAAU,EAAEyB,aAAa,CAAC;IACxE9B,OAAO,CAACkH,GAAG,CAAC,MAAM,CAAC;EACrB;EAEA,OAAOC,QAAQA,CAACC,OAAO,EAAExF,UAAU,GAAG/B,SAAS;IAC7C,IAAIwH,QAAQ,GAAG,IAAI;IAEnB,KAAK,MAAM,CAACC,GAAG,EAAEjI,KAAK,CAAC,IAAIhB,EAAE,CAACkJ,OAAO,CAACH,OAAO,CAAC,EAAE;MAC9C,MAAMI,KAAK,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC;MAC5B,MAAM,CAACrG,KAAK,EAAEa,QAAQ,CAAC,GAAGuF,KAAK;MAC/B,IAAIvF,QAAQ,KAAK,UAAU,EAAE;QAC3B,MAAMyF,OAAO,GAAGF,KAAK,CAAC,CAAC,CAAC;QAExB,MAAM7H,IAAI,GAAG,IAAI,CAAC2E,MAAM,CAAC,IAAI,CAAClC,IAAI,CAACuF,YAAY,CAACC,WAAW,CAACF,OAAO,CAAC,CAAC;QAErE,IAAI9F,UAAU,EAAE;UACd,IAAI,CAAC6B,QAAQ,CAAC7B,UAAU,EAAE2B,MAAM,CAACsE,QAAQ,CAACzG,KAAK,CAAC,EAAEzB,IAAI,CAAC;;QAGzD,IAAI,CAACiC,UAAU,EAAE;UACfyF,QAAQ,GAAG1H,IAAI;;QAGjB,IAAI,CAACwH,QAAQ,CAAC9H,KAAK,EAAEM,IAAI,CAAC;OAC3B,MAAM,IAAIsC,QAAQ,KAAK,QAAQ,EAAE;QAChC,MAAMtC,IAAI,GAAG,IAAI,CAAC0D,SAAS,CAAChE,KAAK,CAAC;QAClC,IAAIuC,UAAU,EAAE;UACd,IAAI,CAAC6B,QAAQ,CAAC7B,UAAU,EAAE2B,MAAM,CAACsE,QAAQ,CAACzG,KAAK,CAAC,EAAEzB,IAAI,CAAC;;;;IAK7D,OAAO0H,QAAQ;EACjB;EAEA,OAAOS,OAAOA,CAACC,WAAW,EAAEX,OAAO,GAAG,EAAE;IAAA,IAAAY,qBAAA;IACtC,MAAMlI,kBAAkB,GAAG,IAAI,CAAC4B,qBAAqB,CAACqG,WAAW,EAAE,KAAK,CAAC;IACzE,MAAM1H,UAAU,IAAA2H,qBAAA,GAAGlI,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEO,UAAU,cAAA2H,qBAAA,cAAAA,qBAAA,GAAI,CAAC;IAEtD,IAAID,WAAW,CAAC9F,QAAQ,KAAK,UAAU,EAAE;MACvC,MAAMgG,SAAS,GAAG,EAAE;MACpB;MAEAb,OAAO,CACL,GAAG/G,UAAU,IAAI0H,WAAW,CAAC9F,QAAQ,IAAI8F,WAAW,CAAC/C,WAAW,EAAE,CACnE,GAAGiD,SAAS;MACb,KAAK,MAAMtG,SAAS,IAAI,IAAI,CAACb,WAAW,CAACiH,WAAW,CAAC,EAAE;QACrD,IAAI,CAACD,OAAO,CAACnG,SAAS,EAAEsG,SAAS,CAAC;;KAErC,MAAM,IAAIF,WAAW,CAAC9F,QAAQ,KAAK,QAAQ,EAAE;MAC5C;MACAmF,OAAO,CAAC,GAAG/G,UAAU,IAAI0H,WAAW,CAAC9F,QAAQ,EAAE,CAAC,GAAG8F,WAAW,CAAC1I,KAAK;KACrE,MAAM,IACL0I,WAAW,CAAC9F,QAAQ,KAAK,UAAU,IACnC8F,WAAW,CAAC9F,QAAQ,KAAK,QAAQ,EACjC;MACA,MAAMgG,SAAS,GAAG,EAAE;MACpB;MAEAb,OAAO,CAAC,GAAG/G,UAAU,IAAI0H,WAAW,CAAC9F,QAAQ,EAAE,CAAC,GAAGgG,SAAS;MAC5D,KAAK,MAAMtG,SAAS,IAAI,IAAI,CAACb,WAAW,CAACiH,WAAW,CAAC,EAAE;QACrD,IAAI,CAACD,OAAO,CAACnG,SAAS,EAAEsG,SAAS,CAAC;;;IAItC,OAAOb,OAAO;EAChB;;AAzbOtI,IAAA,CAAAW,KAAK,GAAG,IAAIhB,UAAU,CAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;AACvCK,IAAA,CAAAS,WAAW,GAAG,IAAId,UAAU,CACjC,CAAC,cAAc,CAAC,EAChB,CAAC,aAAa,CAAC,CAChB;AAEaK,IAAA,CAAAsD,IAAI,GAAG5D,IAAI","ignoreList":[]}]}