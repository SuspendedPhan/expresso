{"remainingRequest":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/babel-loader/lib/index.js!/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/ts-loader/index.js??ref--14-2!/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/eslint-loader/index.js??ref--13-0!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/tests/Tests.ts","dependencies":[{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/tests/Tests.ts","mtime":1714946187074},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/babel.config.js","mtime":1714946187052},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/cache-loader/dist/cjs.js","mtime":1714947270264},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/babel-loader/lib/index.js","mtime":1714947394795},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/ts-loader/index.js","mtime":1714947267504},{"path":"/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/eslint-loader/index.js","mtime":1714947270651}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["chai","describe","AssertionError","TestRunner","logAndRethrow","error","customError","Object","assign","message","actual","expected","console","expect","to","equal","assert","strictEqual","deep","deepStrictEqual","include","deepOwnInclude","throw","throws","not","notStrictEqual","clearStore"],"sources":["/Users/dylan.phan/stuff/expr-explorations/expresso/js/node_modules/eslint-loader/index.js??ref--13-0!/Users/dylan.phan/stuff/expr-explorations/expresso/js/src/components/tests/Tests.ts"],"sourcesContent":["import * as chai from \"chai\";\nimport Functions from \"../../code/Functions\";\nimport { RenderShape, Root } from \"../../store/Root\";\nimport wu from \"wu\";\nimport { describe, it, AssertionError } from \"./TestRunner\";\nimport * as TestRunner from \"./TestRunner\";\nimport threelevels from \"./data/threelevels.json\";\nimport { PenPositionRelation } from \"@/store/Pen\";\n\n// npm run md -- -o C:\\Users\\Yaktori\\Documents\\GitHub\\expresso\\src\\components\\tests\\data\\threelevels.json C:\\Users\\Yaktori\\Documents\\GitHub\\expresso\\src\\components\\tests\\data\\threelevels.md\n\nfunction logAndRethrow(error) {\n  const customError = Object.assign(new AssertionError(), {\n    message: error.message,\n    actual: error.actual,\n    expected: error.expected,\n  });\n  console.error(customError);\n  throw customError;\n}\n\nfunction expect(actual) {\n  return {\n    to: {\n      equal: function(expected) {\n        try {\n          chai.assert.strictEqual(actual, expected);\n        } catch (error) {\n          logAndRethrow(error);\n        }\n      },\n      deep: {\n        equal: function(expected) {\n          try {\n            chai.assert.deepStrictEqual(actual, expected);\n          } catch (error) {\n            logAndRethrow(error);\n          }\n        },\n        include: function(expected) {\n          try {\n            chai.assert.deepOwnInclude(actual, expected);\n          } catch (error) {\n            logAndRethrow(error);\n          }\n        },\n      },\n      throw: function() {\n        try {\n          chai.assert.throws(actual);\n        } catch (error) {\n          logAndRethrow(error);\n        }\n      },\n      not: {\n        equal: function(expected) {\n          try {\n            chai.assert.notStrictEqual(actual, expected);\n          } catch (error) {\n            logAndRethrow(error);\n          }\n        },\n      },\n    },\n  };\n}\n\nTestRunner.clearStore();\n\ndescribe(\"HelloWorld.vue\", () => {\n  // it(\"organism\", () => {\n  //   const root = new Root();\n  //   const organismStore = root.organismStore;\n  //   const circle = organismStore.put(\"circle\");\n  //   const circle2 = organismStore.getFromName(\"circle\");\n  //   expect(circle).to.equal(circle2);\n  // });\n  //\n  // it(\"attribute\", () => {\n  //   const root = new Root();\n  //   const attributeStore = root.attributeStore;\n  //   const organismStore = root.organismStore;\n  //   const circle = organismStore.put(\"circle\");\n  //   const radius = attributeStore.putEditable(circle, \"radius\");\n  // });\n  //\n  // it(\"nested add\", () => {\n  //   // return;\n  //   const root = new Root();\n  //   const attributeStore = root.attributeStore;\n  //   const organismStore = root.organismStore;\n  //   const nodeStore = root.nodeStore;\n  //   const metafunStore = root.metafunStore;\n  //\n  //   // circle -> radius -> number\n  //   const circle = organismStore.put(\"circle\");\n  //   const radius = attributeStore.putEditable(circle, \"radius\");\n  //   const radiusRoot = attributeStore.getRootNode(radius);\n  //   const radiusChild = nodeStore.putChild(\n  //     radiusRoot,\n  //     0,\n  //     nodeStore.addNumber(5)\n  //   );\n  //\n  //   expect(nodeStore.getParent(radiusChild)).to.equal(radiusRoot);\n  //   expect(nodeStore.getChild(radiusRoot, 0)).to.equal(radiusChild);\n  //   expect(nodeStore.nodes.length === 2);\n  //\n  //   // circle -> radius -> variable -> add -> number | number\n  //   const add = nodeStore.addFun(metafunStore.getFromName(\"Add\"));\n  //   nodeStore.putChild(radiusRoot, 0, add);\n  //   expect(() => nodeStore.putChild(radiusRoot, 1, add)).to.throw();\n  //\n  //   expect(nodeStore.getChild(radiusRoot, 0).metaname).to.equal(\"Function\");\n  //   expect(nodeStore.nodes.length).to.equal(4);\n  //\n  //   const add2 = nodeStore.addFun(metafunStore.getFromName(\"Add\"));\n  //   nodeStore.putChild(add, 0, add2);\n  //   radiusRoot.eval();\n  //\n  //   expect(nodeStore.nodes.length).to.equal(6);\n  // });\n  //\n  // it(\"reassign variable\", () => {\n  //   const root = new Root();\n  //   const attributeStore = root.attributeStore;\n  //   const organismStore = root.organismStore;\n  //   const nodeStore = root.nodeStore;\n  //\n  //   const circle = organismStore.put(\"circle\");\n  //   const radius = attributeStore.getRootNode(\n  //     attributeStore.putEditable(circle, \"radius\")\n  //   );\n  //   const x = attributeStore.getRootNode(\n  //     attributeStore.putEditable(circle, \"x\")\n  //   );\n  //   const y = attributeStore.getRootNode(\n  //     attributeStore.putEditable(circle, \"y\")\n  //   );\n  //\n  //   expect(radius.eval()).to.equal(0);\n  //   expect(x.eval()).to.equal(0);\n  //   expect(y.eval()).to.equal(0);\n  //\n  //   nodeStore.putChild(radius, 0, nodeStore.addNumber(5));\n  //   nodeStore.putChild(x, 0, nodeStore.addNumber(7));\n  //   nodeStore.putChild(y, 0, nodeStore.addNumber(9));\n  //\n  //   expect(radius.eval()).to.equal(5);\n  //   expect(x.eval()).to.equal(7);\n  //   expect(y.eval()).to.equal(9);\n  //\n  //   // x = radius\n  //   nodeStore.putChild(x, 0, nodeStore.addReference(radius));\n  //\n  //   expect(radius.eval()).to.equal(5);\n  //   expect(x.eval()).to.equal(5);\n  //   expect(y.eval()).to.equal(9);\n  //\n  //   // x = y\n  //   nodeStore.putChild(x, 0, nodeStore.addReference(y));\n  //\n  //   expect(radius.eval()).to.equal(5);\n  //   expect(x.eval()).to.equal(9);\n  //   expect(y.eval()).to.equal(9);\n  //\n  //   // y = 2\n  //   nodeStore.putChild(y, 0, nodeStore.addNumber(2));\n  //\n  //   expect(radius.eval()).to.equal(5);\n  //   expect(x.eval()).to.equal(2);\n  //   expect(y.eval()).to.equal(2);\n  //\n  //   // x = 3\n  //   nodeStore.putChild(x, 0, nodeStore.addNumber(3));\n  //\n  //   expect(radius.eval()).to.equal(5);\n  //   expect(x.eval()).to.equal(3);\n  //   expect(y.eval()).to.equal(2);\n  // });\n  //\n  // it(\"computeRenderCommands\", () => {\n  //   return;\n  //   const root = new Root();\n  //   const attributeStore = root.attributeStore;\n  //   const organismStore = root.organismStore;\n  //   const nodeStore = root.nodeStore;\n  //   const metafunStore = root.metafunStore;\n  //\n  //   const circle = organismStore.spawn();\n  //   const x = attributeStore.getRootNodeFromName(circle, \"x\");\n  //   const clones = attributeStore.getRootNodeFromName(circle, \"clones\");\n  //   const cloneNumber = attributeStore.getRootNodeFromName(\n  //     circle,\n  //     \"cloneNumber\"\n  //   );\n  //\n  //   nodeStore.putChild(clones, 0, nodeStore.addNumber(3));\n  //\n  //   expect(x.eval()).to.equal(0); // addProperty\n  //   expect(cloneNumber.eval()).to.equal(0); // addComputed\n  //   expect(clones.eval()).to.equal(3); // assignVariable\n  //\n  //   const add = nodeStore.putChild(\n  //     x,\n  //     0,\n  //     nodeStore.addFun(metafunStore.getFromName(\"Add\"))\n  //   );\n  //   nodeStore.putChild(add, 0, nodeStore.addReference(cloneNumber));\n  //   nodeStore.putChild(add, 1, nodeStore.addNumber(3));\n  //\n  //   const expected = [{ x: 3 }, { x: 4 }, { x: 5 }];\n  //   const actual = wu(root.computeRenderCommands())\n  //     .map((row) => ({ x: row.x }))\n  //     .toArray();\n  //   expect(actual).to.deep.equal(expected);\n  // });\n  //\n  // it(\"getNodeChoices\", () => {\n  //   return;\n  //   const root = new Root();\n  //   const attributeStore = root.attributeStore;\n  //   const organismStore = root.organismStore;\n  //   const nodeStore = root.nodeStore;\n  //   const penStore = root.penStore;\n  //   const metafunStore = root.metafunStore;\n  //   metafunStore.metafuns = [\n  //     {\n  //       name: \"Add\",\n  //       paramCount: 2,\n  //       eval: (a, b) => a.eval() + b.eval(),\n  //     },\n  //   ];\n  //\n  //   root.organismCollection.rootOrganism = organismStore.putFromMetaWithoutAttributes(\n  //     \"root\",\n  //     root.metaorganismCollection.getFromName(\"SuperOrganism\")\n  //   );\n  //   const circle = organismStore.addChild(\n  //     organismStore.getRoot(),\n  //     organismStore.putSuperOrganismWithoutAttributes(\"circle\")\n  //   );\n  //   const x = attributeStore.getRootNode(\n  //     attributeStore.putEditable(circle, \"x\")\n  //   );\n  //   const y = attributeStore.getRootNode(\n  //     attributeStore.putEditable(circle, \"y\")\n  //   );\n  //   const clones = attributeStore.getRootNode(\n  //     attributeStore.putEditable(circle, \"clones\")\n  //   );\n  //   const cloneNumber = attributeStore.getRootNode(\n  //     attributeStore.putEmergent(circle, \"cloneNumber\")\n  //   );\n  //\n  //   let expected;\n  //   let actual;\n  //   let suggestions;\n  //\n  //   penStore.setPointedNode(nodeStore.getChild(y, 0));\n  //   penStore.setPointedNode(nodeStore.getChild(x, 0));\n  //\n  //   // --- number ---\n  //\n  //   penStore.setIsQuerying(true);\n  //   penStore.setQuery(\"52\");\n  //   suggestions = penStore.getNodeChoices();\n  //\n  //   expected = [\"52\"];\n  //   actual = suggestions.map((row) => row.text).toArray();\n  //   expect(actual).to.deep.equal(expected);\n  //\n  //   suggestions = penStore.getNodeChoices();\n  //   penStore.commitNodeChoice(suggestions.take(1).toArray()[0]);\n  //   expect(x.eval()).to.equal(52);\n  //\n  //   // --- empty query ---\n  //   // should list all, but skip x\n  //\n  //   penStore.setIsQuerying(true);\n  //   penStore.setQuery(\"\");\n  //   suggestions = penStore.getNodeChoices();\n  //   expected = [\"circle.y\", \"circle.clones\", \"circle.cloneNumber\", \"Add\"];\n  //   actual = suggestions.map((row) => row.text).toArray();\n  //   expect(actual).to.deep.equal(expected);\n  //\n  //   // --- commit function ---\n  //\n  //   suggestions = penStore.getNodeChoices();\n  //   penStore.commitNodeChoice(suggestions.drop(3).toArray()[0]);\n  //   expect(x.eval()).to.equal(0);\n  //\n  //   // --- non empty query ---\n  //\n  //   penStore.setIsQuerying(true);\n  //   penStore.setQuery(\"lon\");\n  //   suggestions = penStore.getNodeChoices();\n  //   expected = [\"circle.clones\", \"circle.cloneNumber\"];\n  //   actual = suggestions.map((row) => row.text).toArray();\n  //   expect(actual).to.deep.equal(expected);\n  //\n  //   // --- commit reference ---\n  //   // --- new pointed node ---\n  //   // --- no more querying ---\n  //\n  //   suggestions = penStore.getNodeChoices();\n  //   const numberNode = nodeStore.putChild(clones, 0, nodeStore.addNumber(3));\n  //   penStore.commitNodeChoice(suggestions.take(1).toArray()[0]);\n  //   expect(x.eval()).to.equal(3);\n  //   // expect(penStore.pointedNode).to.equal(nodeStore.getChild(x, 0));\n  //   expect(penStore.getIsQuerying()).to.equal(false);\n  // });\n  //\n  // it(\"isSubsequence\", () => {\n  //   let actual;\n  //\n  //   actual = Functions.isSubsequence(\"cne\", \"clones\");\n  //   expect(actual).to.equal(true);\n  //\n  //   actual = Functions.isSubsequence(\"cneq\", \"clones\");\n  //   expect(actual).to.equal(false);\n  //\n  //   actual = Functions.isSubsequence(\"clones\", \"clon\");\n  //   expect(actual).to.equal(false);\n  //\n  //   actual = Functions.isSubsequence(\"clones\", \"clones\");\n  //   expect(actual).to.equal(true);\n  //\n  //   actual = Functions.isSubsequence(\"\", \"clones\");\n  //   expect(actual).to.equal(true);\n  //\n  //   actual = Functions.isSubsequence(\"x\", \"\");\n  //   expect(actual).to.equal(false);\n  // });\n  //\n  // it(\"traverseLeft\", () => {\n  //   // return;\n  //   const tree = {\n  //     a: {\n  //       b: {\n  //         c: {},\n  //         d: {},\n  //       },\n  //       e: {\n  //         f: {},\n  //         g: {\n  //           i: {\n  //             j: {},\n  //             k: {},\n  //           },\n  //           l: {},\n  //         },\n  //         h: {},\n  //       },\n  //     },\n  //   };\n  //   const childrenGetter = (node) => {\n  //     const children = Array.from(wu.values(node));\n  //     children.sort();\n  //     return children;\n  //   };\n  //   const parents = new Map();\n  //   const setParents = (node) => {\n  //     const children = childrenGetter(node);\n  //     for (const child of children) {\n  //       parents.set(child, node);\n  //       setParents(child);\n  //     }\n  //   };\n  //   setParents(tree.a);\n  //\n  //   expect(parents.get(tree.a.b)).to.equal(tree.a);\n  //   expect(parents.get(tree.a.e.g.i.j)).to.equal(tree.a.e.g.i);\n  //\n  //   const parentGetter = (node) => parents.get(node);\n  //\n  //   let traverse;\n  //   let actual;\n  //\n  //   traverse = Functions.traverseLeft(tree.a.e.g, parentGetter, childrenGetter);\n  //   actual = traverse.next().value;\n  //   expect(actual).to.equal(tree.a.e.f);\n  //\n  //   traverse = Functions.traverseLeft(\n  //     tree.a.e.g.i.k,\n  //     parentGetter,\n  //     childrenGetter\n  //   );\n  //   actual = traverse.next().value;\n  //   expect(actual).to.equal(tree.a.e.g.i.j);\n  //\n  //   traverse = Functions.traverseLeft(tree.a.b.c, parentGetter, childrenGetter);\n  //   actual = traverse.next().value;\n  //   expect(actual).to.equal(tree.a.b);\n  //\n  //   traverse = Functions.traverseLeft(tree.a, parentGetter, childrenGetter);\n  //   expect(wu.some(() => true, traverse)).to.equal(false);\n  //\n  //   // -- right --\n  //\n  //   traverse = Functions.traverseRight(\n  //     tree.a.e.g,\n  //     parentGetter,\n  //     childrenGetter\n  //   );\n  //   actual = traverse.next().value;\n  //   expect(actual).to.equal(tree.a.e.g.i);\n  //\n  //   traverse = Functions.traverseRight(\n  //     tree.a.e.g.i.k,\n  //     parentGetter,\n  //     childrenGetter\n  //   );\n  //   actual = traverse.next().value;\n  //   expect(actual).to.equal(tree.a.e.g.l);\n  //\n  //   traverse = Functions.traverseRight(tree.a.b, parentGetter, childrenGetter);\n  //   actual = traverse.next().value;\n  //   expect(actual).to.equal(tree.a.b.c);\n  //\n  //   traverse = Functions.traverseRight(\n  //     tree.a.e.h,\n  //     parentGetter,\n  //     childrenGetter\n  //   );\n  //   expect(wu.some(() => true, traverse)).to.equal(false);\n  // });\n  //\n  // it(\"assign number\", () => {\n  //   const root = new Root();\n  //   const attributeStore = root.attributeStore;\n  //   const organismStore = root.organismStore;\n  //   const nodeStore = root.nodeStore;\n  //   const penStore = root.penStore;\n  //   const metafunStore = root.metafunStore;\n  //\n  //   const circle = organismStore.put(\"circle\");\n  //   const x = attributeStore.putEditable(circle, \"x\");\n  //   const cloneNumber = attributeStore.putEmergent(circle, \"cloneNumber\");\n  //   attributeStore.assignNumber(x, 5);\n  //   attributeStore.assignNumber(cloneNumber, 10);\n  //   expect(attributeStore.getEvaled(x)).to.equal(5);\n  //   expect(attributeStore.getEvaled(cloneNumber)).to.equal(10);\n  // });\n  //\n  // it(\"serialize\", () => {\n  //   // references\n  //   // functions\n  //\n  //   // x = add(2, add(5, 3))\n  //   // y = x\n  //\n  //   const root = new Root();\n  //   const attributeStore = root.attributeStore;\n  //   const organismStore = root.organismStore;\n  //   const nodeStore = root.nodeStore;\n  //   const penStore = root.penStore;\n  //   const metafunStore = root.metafunStore;\n  //\n  //   const circle = organismStore.putFromMeta(\n  //     \"circle\",\n  //     root.metaorganismCollection.getFromName(\"Circle\")\n  //   );\n  //   const x = attributeStore.getRootNode(\n  //     attributeStore.putEditable(circle, \"xx\")\n  //   );\n  //   const y = attributeStore.getRootNode(\n  //     attributeStore.putEditable(circle, \"yy\")\n  //   );\n  //   attributeStore.putEditable(circle, \"yy\");\n  //\n  //   const addNode = nodeStore.addFun(metafunStore.getFromName(\"Add\"));\n  //   const addNode2 = nodeStore.addFun(metafunStore.getFromName(\"Add\"));\n  //   nodeStore.putChild(x, 0, addNode);\n  //   nodeStore.putChild(addNode, 0, nodeStore.addNumber(2));\n  //   nodeStore.putChild(addNode, 1, addNode2);\n  //   nodeStore.putChild(addNode2, 0, nodeStore.addNumber(5));\n  //   nodeStore.putChild(addNode2, 1, nodeStore.addNumber(3));\n  //   nodeStore.putChild(y, 0, nodeStore.addReference(x));\n  //\n  //   expect(x.eval()).to.equal(10);\n  //   expect(y.eval()).to.equal(10);\n  //\n  //   const text = root.getSerialized();\n  //   const store2 = root.deserialize(text);\n  //\n  //   expect(x.eval()).to.equal(10);\n  //   expect(y.eval()).to.equal(10);\n  //\n  //   nodeStore.putChild(x, 0, nodeStore.addNumber(1));\n  //   expect(x.eval()).to.equal(1);\n  // });\n  //\n  // it(\"pluck\", () => {\n  //   let actual;\n  //   let expected;\n  //\n  //   actual = Functions.pluck(\n  //     {\n  //       a: 2,\n  //       b: 3,\n  //       c: 5,\n  //     },\n  //     [\"a\", \"b\"]\n  //   );\n  //   expected = {\n  //     a: 2,\n  //     b: 3,\n  //   };\n  //   expect(actual).to.deep.equal(expected);\n  //\n  //   expect(() => Functions.pluck({}, [\"a\", \"b\"])).to.throw();\n  //\n  //   actual = Functions.pluck(\n  //     {\n  //       a: 2,\n  //       b: 3,\n  //       c: 5,\n  //     },\n  //     []\n  //   );\n  //   expected = {};\n  //   expect(actual).to.deep.equal(expected);\n  //\n  //   actual = Functions.pluck(\n  //     {\n  //       a: 2,\n  //       b: 3,\n  //       c: 5,\n  //     },\n  //     [\"a\", \"b\", \"c\"]\n  //   );\n  //   expected = {\n  //     a: 2,\n  //     b: 3,\n  //     c: 5,\n  //   };\n  //   expect(actual).to.deep.equal(expected);\n  // });\n  //\n  // it(\"getAttributesForOrganism\", () => {\n  //   const root = new Root();\n  //   const attributeStore = root.attributeStore;\n  //   const organismStore = root.organismStore;\n  //   const nodeStore = root.nodeStore;\n  //   const penStore = root.penStore;\n  //   const metafunStore = root.metafunStore;\n  //\n  //   const circle = organismStore.put(\"circle\");\n  //   const x = attributeStore.putEditable(circle, \"x\");\n  //   const y = attributeStore.putEditable(circle, \"y\");\n  //   const cloneNumber = attributeStore.putEmergent(circle, \"cloneNumber\");\n  //\n  //   const actual = Array.from(attributeStore.getAttributesForOrganism(circle));\n  //   const expected = [x, y, cloneNumber];\n  //   expect(actual).to.deep.equal(expected);\n  // });\n  //\n  // it(\"organs\", () => {\n  //   return;\n  //   const root = new Root();\n  //   const attributeCollection = root.attributeCollection;\n  //   const organismCollection = root.organismCollection;\n  //   let final = {\n  //     \"SuperOrganism root\": {\n  //       \"editattr gravity\": { \"0 Number\": 0 },\n  //       \"editattr clones\": { \"0 Number\": 0 },\n  //       \"emerattr cloneNumber\": { \"0 Number\": 0 },\n  //       \"SuperOrganism tree\": {\n  //         \"editattr growth\": { \"0 Number\": 0 },\n  //       },\n  //       \"SuperOrganism orbit\": {\n  //         \"editattr orbitSize\": { \"0 Number\": 0 },\n  //         \"SuperOrganism moon\": {\n  //           \"editattr luminosity\": { \"0 Number\": 0 },\n  //         },\n  //         \"SuperOrganism earth\": {\n  //           \"editattr life\": { \"0 Number\": 0 },\n  //         },\n  //       },\n  //     },\n  //   };\n  //\n  //   let start = {\n  //     \"SuperOrganism root\": {\n  //       \"editattr gravity\": { \"0 Number\": 0 },\n  //       \"editattr clones\": { \"0 Number\": 0 },\n  //       \"emerattr cloneNumber\": { \"0 Number\": 0 },\n  //       \"SuperOrganism tree\": {\n  //         \"editattr growth\": { \"0 Number\": 0 },\n  //       },\n  //       \"SuperOrganism orbit\": {\n  //         \"editattr orbitSize\": { \"0 Number\": 0 },\n  //         \"SuperOrganism moon\": {\n  //           \"editattr luminosity\": { \"0 Number\": 0 },\n  //         },\n  //       },\n  //     },\n  //   };\n  //\n  //   // expect(new Root().fromTree(final).toTree()).to.deep.equal(final);\n  //\n  //   // --- add organ ---\n  //\n  //   let actualRoot = new Root().fromTree(start);\n  //\n  //   let metaorganism = actualRoot.metaorganismCollection.getFromName(\n  //     \"SuperOrganism\"\n  //   );\n  //   let earth = actualRoot.organismCollection.putFromMetaWithoutAttributes(\n  //     \"earth\",\n  //     metaorganism\n  //   );\n  //   let orbit = actualRoot.organismCollection.getOrganismFromPath(\"orbit\");\n  //   actualRoot.organismCollection.addChild(orbit, earth);\n  //   actualRoot.attributeCollection.putEditable(earth, \"life\");\n  //   expect(actualRoot.toTree()).to.deep.equal(final);\n  //   expect(actualRoot.organismCollection.organisms.length).to.equal(5);\n  //   expect(actualRoot.organismCollection.organs.length).to.equal(4);\n  //   expect(actualRoot.attributeCollection.attributes.length).to.equal(7);\n  //   expect(actualRoot.attributeCollection.attributeParents.length).to.equal(7);\n  //   expect(actualRoot.attributeCollection.rootNodes.length).to.equal(7);\n  //   expect(actualRoot.nodeStore.nodes.length).to.equal(14);\n  //   expect(actualRoot.nodeStore.nodeParents.length).to.equal(7);\n  //\n  //   // --- remove organ ---\n  //\n  //   actualRoot.organismCollection.remove(earth);\n  //   expect(actualRoot.toTree()).to.deep.equal(start);\n  //   expect(actualRoot.organismCollection.organisms.length).to.equal(4);\n  //   expect(actualRoot.organismCollection.organs.length).to.equal(3);\n  //   expect(actualRoot.attributeCollection.attributes.length).to.equal(6);\n  //   expect(actualRoot.attributeCollection.attributeParents.length).to.equal(6);\n  //   expect(actualRoot.attributeCollection.rootNodes.length).to.equal(6);\n  //   expect(actualRoot.nodeStore.nodes.length).to.equal(12);\n  //   expect(actualRoot.nodeStore.nodeParents.length).to.equal(6);\n  //\n  //   // --- remove non leaf organ ---\n  //\n  //   let expected = {\n  //     \"SuperOrganism root\": {\n  //       \"editattr gravity\": { \"0 Number\": 0 },\n  //       \"editattr clones\": { \"0 Number\": 0 },\n  //       \"emerattr cloneNumber\": { \"0 Number\": 0 },\n  //       \"SuperOrganism tree\": {\n  //         \"editattr growth\": { \"0 Number\": 0 },\n  //       },\n  //     },\n  //   };\n  //\n  //   actualRoot = new Root().fromTree(final);\n  //   orbit = actualRoot.organismCollection.getOrganismFromPath(\"orbit\");\n  //   let orbitRoot = actualRoot.nodeStore.getFromPath([\"orbit\"], \"orbitSize\");\n  //   let add1 = actualRoot.nodeStore.putChild(\n  //     orbitRoot,\n  //     0,\n  //     actualRoot.nodeStore.addFun(actualRoot.metafunStore.getFromName(\"Add\"))\n  //   );\n  //   let add2 = actualRoot.nodeStore.putChild(\n  //     add1,\n  //     0,\n  //     actualRoot.nodeStore.addFun(actualRoot.metafunStore.getFromName(\"Add\"))\n  //   );\n  //\n  //   expect(actualRoot.nodeStore.nodes.length).to.equal(18);\n  //   expect(actualRoot.nodeStore.nodeParents.length).to.equal(11);\n  //\n  //   actualRoot.organismCollection.remove(orbit);\n  //\n  //   expect(actualRoot.toTree()).to.deep.equal(expected);\n  //   expect(actualRoot.organismCollection.organisms.length).to.equal(2);\n  //   expect(actualRoot.organismCollection.organs.length).to.equal(1);\n  //   expect(actualRoot.attributeCollection.attributes.length).to.equal(4);\n  //   expect(actualRoot.attributeCollection.attributeParents.length).to.equal(4);\n  //   expect(actualRoot.attributeCollection.rootNodes.length).to.equal(4);\n  //   expect(actualRoot.nodeStore.nodes.length).to.equal(8);\n  //   expect(actualRoot.nodeStore.nodeParents.length).to.equal(4);\n  // });\n  //\n  // it(\"pen organs\", () => {\n  //   let final = {\n  //     \"SuperOrganism root\": {\n  //       \"editattr gravity\": { \"0 Number\": 0 },\n  //       \"editattr clones\": { \"0 Number\": 0 },\n  //       \"emerattr cloneNumber\": { \"0 Number\": 0 },\n  //       \"SuperOrganism tree\": {\n  //         \"editattr growth\": { \"0 Number\": 0 },\n  //         \"editattr har\": { \"0 Number\": 0 },\n  //       },\n  //       \"SuperOrganism orbit\": {\n  //         \"editattr orbitSize\": { \"0 Number\": 0 },\n  //         \"SuperOrganism moon\": {\n  //           \"editattr luminosity\": { \"0 Number\": 0 },\n  //         },\n  //         \"SuperOrganism earth\": {\n  //           \"editattr life\": { \"0 Number\": 0 },\n  //         },\n  //       },\n  //     },\n  //   };\n  //   const root = new Root().fromTree(final);\n  //   const attributeCollection = root.attributeCollection;\n  //   const organismCollection = root.organismCollection;\n  //   const nodeCollection = root.nodeStore;\n  //   const pen = root.penStore;\n  //   root.metafunStore.metafuns = [];\n  //\n  //   pen.setPointedNode(\n  //     nodeCollection.getFromPath([\"orbit\", \"earth\"], \"life\", [0])\n  //   );\n  //   pen.setIsQuerying(true);\n  //   pen.setQuery(\"\");\n  //   let suggestions = pen.getNodeChoices();\n  //   let actual = wu(suggestions)\n  //     .pluck(\"text\")\n  //     .toArray();\n  //   let expected = [\n  //     \"orbit.orbitSize\",\n  //     \"root.gravity\",\n  //     \"root.clones\",\n  //     \"root.cloneNumber\",\n  //   ];\n  //   expect(actual).to.deep.equal(expected);\n  //\n  //   // --- don't get the orbit ones, still get my ones ---\n  //\n  //   pen.setPointedNode(nodeCollection.getFromPath([\"tree\"], \"growth\", [0]));\n  //   pen.setIsQuerying(true);\n  //   pen.setQuery(\"\");\n  //   suggestions = pen.getNodeChoices();\n  //   actual = wu(suggestions)\n  //     .pluck(\"text\")\n  //     .toArray();\n  //   expected = [\"tree.har\", \"root.gravity\", \"root.clones\", \"root.cloneNumber\"];\n  //   expect(actual).to.deep.equal(expected);\n  // });\n  //\n  // it(\"organs compute\", () => {\n  //   return;\n  //   let final = {\n  //     \"SuperOrganism root\": {\n  //       \"SuperOrganism grid1\": {\n  //         \"editattr clones\": { \"0 Number\": 0 },\n  //         \"editattr gridx\": { \"0 Number\": 0 },\n  //         \"emerattr cloneNumber\": { \"0 Number\": 0 },\n  //         \"SuperOrganism grid2\": {\n  //           \"editattr clones\": { \"0 Number\": 0 },\n  //           \"editattr gridy\": { \"0 Number\": 0 },\n  //           \"emerattr cloneNumber\": { \"0 Number\": 0 },\n  //           \"Rectangle square\": {\n  //             \"editattr x\": { \"0 Number\": 0 },\n  //             \"editattr y\": { \"0 Number\": 0 },\n  //           },\n  //         },\n  //       },\n  //     },\n  //   };\n  //\n  //   const root = new Root().fromTree(final);\n  //   const attributeCollection = root.attributeCollection;\n  //   const organismCollection = root.organismCollection;\n  //   const nodeCollection = root.nodeStore;\n  //\n  //   organismCollection.initRootOrganism();\n  //   const x = nodeCollection.getFromPath([\"grid1\", \"grid2\", \"square\"], \"x\");\n  //   const y = nodeCollection.getFromPath([\"grid1\", \"grid2\", \"square\"], \"y\");\n  //   const gridx = nodeCollection.getFromPath([\"grid1\"], \"gridx\");\n  //   const gridy = nodeCollection.getFromPath([\"grid1\", \"grid2\"], \"gridy\");\n  //   const grid1clones = nodeCollection.getFromPath([\"grid1\"], \"clones\");\n  //   const grid2clones = nodeCollection.getFromPath(\n  //     [\"grid1\", \"grid2\"],\n  //     \"clones\"\n  //   );\n  //   nodeCollection.putChild(x, 0, nodeCollection.addReference(gridx));\n  //   nodeCollection.putChild(y, 0, nodeCollection.addReference(gridy));\n  //   nodeCollection.putChild(grid1clones, 0, nodeCollection.addNumber(3));\n  //   nodeCollection.putChild(grid2clones, 0, nodeCollection.addNumber(3));\n  //   const actual = wu(root.computeRenderCommands()).toArray();\n  //   const expected = [\n  //     { shape: RenderShape.Rectangle, x: -1, y: -1 },\n  //     { shape: RenderShape.Rectangle, x: -1, y: 0 },\n  //     { shape: RenderShape.Rectangle, x: -1, y: 1 },\n  //     { shape: RenderShape.Rectangle, x: 0, y: -1 },\n  //     { shape: RenderShape.Rectangle, x: 0, y: 0 },\n  //     { shape: RenderShape.Rectangle, x: 0, y: 1 },\n  //     { shape: RenderShape.Rectangle, x: 1, y: -1 },\n  //     { shape: RenderShape.Rectangle, x: 1, y: 0 },\n  //     { shape: RenderShape.Rectangle, x: 1, y: 1 },\n  //   ];\n  //\n  //   expect(actual.length).to.equal(expected.length);\n  //   for (const at of actual) {\n  //     expect(expected).to.deep.include(at);\n  //   }\n  // });\n  //\n  // it(\"insert node, from tree\", () => {\n  //   let tree = {\n  //     \"0 Function Add\": {\n  //       \"0 Number\": 3,\n  //       \"1 Function Multiply\": {\n  //         \"0 Number\": 5,\n  //         \"1 Number\": 2,\n  //       },\n  //     },\n  //   };\n  //\n  //   const root = new Root();\n  //   const nodeCollection = root.nodeStore;\n  //\n  //   {\n  //     const rootNode = nodeCollection.fromTree(tree);\n  //     expect(rootNode.eval()).to.equal(13);\n  //     const multiplyNode = nodeCollection.getChild(rootNode, 1);\n  //     const insertNode = nodeCollection.addFun(\n  //       root.metafunStore.getFromName(\"Divide\")\n  //     );\n  //     nodeCollection.insertNodeAsParent(multiplyNode, insertNode);\n  //\n  //     let expected = {\n  //       \"0 Function Add\": {\n  //         \"0 Number\": 3,\n  //         \"1 Function Divide\": {\n  //           \"0 Function Multiply\": {\n  //             \"0 Number\": 5,\n  //             \"1 Number\": 2,\n  //           },\n  //           \"1 Number\": 0,\n  //         },\n  //       },\n  //     };\n  //\n  //     expect(nodeCollection.toTree2(rootNode)).to.deep.equal(expected);\n  //   }\n  // });\n  //\n  // // it(\"ghost edits\", () => {\n  // //   let tree = {\n  // //     \"SuperOrganism root\": {\n  // //       \"editattr gravity\": {\n  // //         \"0 Function Add\": {\n  // //           \"0 Number\": 3,\n  // //           \"1 Function Multiply\": {\n  // //             \"0 Number\": 5,\n  // //             \"1 Number\": 2,\n  // //           },\n  // //         },\n  // //       },\n  // //     },\n  // //   };\n  //\n  // //   const root = new Root().fromTree(tree);\n  // //   const pen = root.pen;\n  // //   const nodeCollection = root.nodeCollection;\n  // //   expect(root.toTree()).to.deep.equal(tree);\n  //\n  // //   {\n  // //     const rootNode = nodeCollection.getFromPath([], \"gravity\", []);\n  // //     const addNode = nodeCollection.getFromPath([], \"gravity\", [0]);\n  // //     pen.setPenPosition({\n  // //       positionType: \"Node\",\n  // //       referenceNodeId: addNode.id,\n  // //       relation: PenPositionRelation.Before,\n  // //     });\n  // //     pen.setQuery(\"Lerp\");\n  // //     pen.setIsQuerying(true);\n  // //     const ghostEdit = pen.getNodeChoices().next().value;\n  // //     pen.commitNodeChoice(ghostEdit);\n  //\n  // //     const expected = {\n  // //       \"0 Variable\": {\n  // //         \"0 Function Lerp\": {\n  // //           \"0 Function Add\": {\n  // //             \"0 Number\": 3,\n  // //             \"1 Function Multiply\": {\n  // //               \"0 Number\": 5,\n  // //               \"1 Number\": 2,\n  // //             },\n  // //           },\n  // //           \"1 Number\": 0,\n  // //           \"2 Number\": 0,\n  // //         },\n  // //       },\n  // //     };\n  // //     expect(nodeCollection.toTree2(rootNode)).to.deep.equal(expected);\n  // //   }\n  //\n  // //   {\n  // //     root.fromTree(tree);\n  // //     const rootNode = nodeCollection.getFromPath([], \"gravity\", []);\n  // //     const addNode = nodeCollection.getFromPath([], \"gravity\", [0]);\n  // //     pen.setPenPosition({\n  // //       positionType: \"Node\",\n  // //       referenceNodeId: addNode.id,\n  // //       relation: PenPositionRelation.On,\n  // //     });\n  // //     pen.setQuery(\"Lerp\");\n  // //     pen.setIsQuerying(true);\n  // //     const ghostEdit = pen.getNodeChoices().next().value;\n  // //     pen.commitNodeChoice(ghostEdit);\n  //\n  // //     const expected = {\n  // //       \"0 Variable\": {\n  // //         \"0 Function Lerp\": {\n  // //           \"0 Number\": 3,\n  // //           \"1 Function Multiply\": {\n  // //             \"0 Number\": 5,\n  // //             \"1 Number\": 2,\n  // //           },\n  // //           \"2 Number\": 0,\n  // //         },\n  // //       },\n  // //     };\n  // //     expect(nodeCollection.toTree2(rootNode)).to.deep.equal(expected);\n  // //   }\n  // // });\n  //\n  // it(\"simple integration\", () => {\n  //   const root = new Root();\n  //   root.organismCollection.initRootOrganism();\n  //   const attribute = root.attributeCollection.putEditable(\n  //     root.organismCollection.rootOrganism,\n  //     \"x\"\n  //   );\n  //   root.attributeCollection.getRootNode(attribute);\n  // });\n  //\n  // it(\"node drop/add argument\", () => {\n  //   return;\n  //   let tree = {\n  //     \"SuperOrganism root\": {\n  //       \"editattr gravity\": {\n  //         \"0 Function Lerp\": {\n  //           \"0 Number\": 5,\n  //           \"1 Number\": 2,\n  //           \"2 Number\": 3,\n  //         },\n  //       },\n  //     },\n  //   };\n  //\n  //   const root = new Root().fromTree(tree);\n  //   const pen = root.pen;\n  //   const nodeCollection = root.nodeCollection;\n  //   const lerpNode = nodeCollection.getFromPath([], \"gravity\", [0]);\n  //   const node0 = nodeCollection.getFromPath([], \"gravity\", [0, 0]);\n  //   const node1 = nodeCollection.getFromPath([], \"gravity\", [0, 1]);\n  //   const node2 = nodeCollection.getFromPath([], \"gravity\", [0, 2]);\n  //   // expect(root.toTree()).to.deep.equal(tree);\n  //   expect(node2.eval()).to.equal(3);\n  //\n  //   {\n  //     pen.setPointedNode(lerpNode);\n  //     pen.setIsQuerying(true);\n  //     pen.setQuery(\"Add\");\n  //     const edit = pen.getNodeChoices().next().value;\n  //     expect(edit).to.not.equal(undefined);\n  //     pen.commitNodeChoice(edit);\n  //\n  //     const expected = {\n  //       \"SuperOrganism root\": {\n  //         \"editattr gravity\": {\n  //           \"0 Function Add\": {\n  //             \"0 Number\": 5,\n  //             \"1 Number\": 2,\n  //           },\n  //         },\n  //       },\n  //     };\n  //     // expect(root.toTree()).to.deep.equal(expected);\n  //     expect(nodeCollection.nodes.getUnique(\"id\", node2.id, false)).to.equal(\n  //       undefined\n  //     );\n  //   }\n  //\n  //   {\n  //     pen.setPointedNode(nodeCollection.getFromPath([], \"gravity\", [0]));\n  //     const expected = {\n  //       \"SuperOrganism root\": {\n  //         \"editattr gravity\": {\n  //           \"0 Number\": 3,\n  //         },\n  //       },\n  //     };\n  //     pen.setIsQuerying(true);\n  //     pen.setQuery(\"3\");\n  //     const edit = pen.getNodeChoices().next().value;\n  //     pen.commitNodeChoice(edit);\n  //\n  //     // expect(root.toTree()).to.deep.equal(expected);\n  //     expect(nodeCollection.nodes.getUnique(\"id\", node1.id, false)).to.equal(\n  //       undefined\n  //     );\n  //     expect(nodeCollection.nodes.getUnique(\"id\", node0.id, false)).to.equal(\n  //       undefined\n  //     );\n  //   }\n  // });\n  //\n  // it(\"vector\", () => {\n  //   const root = new Root();\n  //   const pen = root.pen;\n  //   const nodeCollection = root.nodeCollection;\n  //   const organismCollection = root.organismCollection;\n  //   const attributeCollection = root.attributeCollection;\n  //   const circle = organismCollection.putFromMetaname(\"circle\", \"Circle\");\n  //   attributeCollection.remove(\n  //     attributeCollection.getAttributeFromName(circle, \"radius\")\n  //   );\n  //   attributeCollection.remove(\n  //     attributeCollection.getAttributeFromName(circle, \"clones\")\n  //   );\n  //   attributeCollection.remove(\n  //     attributeCollection.getAttributeFromName(circle, \"cloneNumber\")\n  //   );\n  //   // attributeCollection.remove(attributeCollection.getAttributeFromName(circle, 'time01'));\n  //   organismCollection.rootOrganism = circle;\n  //   // organismCollection.addChild(organismCollection.getRoot(), circle);\n  //\n  //   const commands = Array.from(root.computeRenderCommands());\n  //   expect(commands[0].x).to.equal(0);\n  //   expect(commands[0].y).to.equal(0);\n  // });\n  //\n  // it(\"vector2\", () => {\n  //   const tree = {\n  //     \"SuperOrganism root\": {\n  //       \"editattr xy Vector\": {},\n  //       \"editattr radius Number\": {},\n  //     },\n  //   };\n  //   const root = new Root().fromTree(tree);\n  //   const pen = root.pen;\n  //   const nodeCollection = root.nodeCollection;\n  //   const organismCollection = root.organismCollection;\n  //   const attributeCollection = root.attributeCollection;\n  //   expect(nodeCollection.getFromPath([], \"xy\", []).eval().x).to.equal(0);\n  //\n  //   pen.setPointedNode(nodeCollection.getFromPath([], \"xy\", [0]));\n  //   pen.setIsQuerying(true);\n  //   pen.setQuery(\"radius\");\n  //   expect(pen.getNodeChoices().next().done).to.equal(true);\n  //\n  //   // --------------------------------------------------------\n  //\n  //   pen.setQuery(\"Add\");\n  //   pen.commitFirstNodeChoice();\n  //   const ex = {\n  //     \"SuperOrganism root\": {\n  //       \"editattr xy Vector\": {\n  //         \"0 Function Add\": {\n  //           \"0 Vector\": {\n  //             \"0 Number\": 0,\n  //             \"1 Number\": 0,\n  //           },\n  //           \"1 Vector\": {\n  //             \"0 Number\": 0,\n  //             \"1 Number\": 0,\n  //           },\n  //         },\n  //       },\n  //       \"editattr radius Number\": {\n  //         \"0 Number\": 0,\n  //       },\n  //     },\n  //   };\n  //\n  //   expect(root.toTree()).to.deep.equal(ex);\n  //\n  //   // --------------------------------------------------------\n  // });\n  //\n  // it(\"code mirror\", () => {\n  //   let tree = {\n  //     \"SuperOrganism root\": {\n  //       \"editattr gravity\": {\n  //         \"0 Function Add\": {\n  //           \"0 Number\": 3,\n  //           \"1 Function Multiply\": {\n  //             \"0 Number\": 52,\n  //             \"1 Number\": 2,\n  //           },\n  //         },\n  //       },\n  //     },\n  //   };\n  //\n  //   const root = new Root().fromTree(tree);\n  //   const pen = root.pen;\n  //   const nodeCollection = root.nodeCollection;\n  //   // expect(root.toTree()).to.deep.equal(tree);\n  //\n  //   const organism = root.organismCollection.getRoot();\n  //   const attribute = root.attributeCollection.getAttributeFromName(\n  //     organism,\n  //     \"gravity\"\n  //   );\n  //\n  //   expect(pen.getTextForAttribute(attribute)).to.equal(\"Add(3,Multiply(52,2))\");\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 0, endIndex: 0 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 0, endIndex: 0 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 1, endIndex: 1 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 0, endIndex: 3 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 2, endIndex: 2 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 0, endIndex: 3 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 2, endIndex: 2 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 0, endIndex: 3 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 3, endIndex: 3 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 4, endIndex: 4 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 4, endIndex: 4 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 4, endIndex: 4 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 5, endIndex: 5 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 4, endIndex: 5 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 5, endIndex: 5 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 6, endIndex: 6 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 6, endIndex: 6 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 6, endIndex: 6 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 7, endIndex: 7 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 6, endIndex: 14 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 14, endIndex: 14 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 15, endIndex: 15 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 16, endIndex: 16 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 15, endIndex: 17 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 19, endIndex: 19 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 18, endIndex: 19 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 20, endIndex: 20 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 18, endIndex: 19 });\n  //\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 21, endIndex: 21 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 18, endIndex: 19 });\n  //\n  //   // add(3,multiply(52,2))\n  //\n  //   pen.setSelection(null);\n  //   expect(pen.getSelection()).to.deep.equal(null);\n  //\n  //   // test move left\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 4, endIndex: 4 });\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 3, endIndex: 3 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 0, endIndex: 3 });\n  //\n  //   // test select paren from no selection\n  //   pen.setSelection(null);\n  //   pen.setSelection({ attributeId: attribute.id, startIndex: 3, endIndex: 3 });\n  //   expect(pen.getSelection()).to.deep.equal({ attributeId: attribute.id, startIndex: 4, endIndex: 4 });\n  // });\n});\n"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAI5B,SAASC,QAAQ,EAAMC,cAAc,QAAQ,cAAc;AAC3D,OAAO,KAAKC,UAAU,MAAM,cAAc;AAI1C;AAEA,SAASC,aAAaA,CAACC,KAAK;EAC1B,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAIN,cAAc,EAAE,EAAE;IACtDO,OAAO,EAAEJ,KAAK,CAACI,OAAO;IACtBC,MAAM,EAAEL,KAAK,CAACK,MAAM;IACpBC,QAAQ,EAAEN,KAAK,CAACM;GACjB,CAAC;EACFC,OAAO,CAACP,KAAK,CAACC,WAAW,CAAC;EAC1B,MAAMA,WAAW;AACnB;AAEA,SAASO,MAAMA,CAACH,MAAM;EACpB,OAAO;IACLI,EAAE,EAAE;MACFC,KAAK,EAAE,SAAAA,CAASJ,QAAQ;QACtB,IAAI;UACFX,IAAI,CAACgB,MAAM,CAACC,WAAW,CAACP,MAAM,EAAEC,QAAQ,CAAC;SAC1C,CAAC,OAAON,KAAK,EAAE;UACdD,aAAa,CAACC,KAAK,CAAC;;MAExB,CAAC;MACDa,IAAI,EAAE;QACJH,KAAK,EAAE,SAAAA,CAASJ,QAAQ;UACtB,IAAI;YACFX,IAAI,CAACgB,MAAM,CAACG,eAAe,CAACT,MAAM,EAAEC,QAAQ,CAAC;WAC9C,CAAC,OAAON,KAAK,EAAE;YACdD,aAAa,CAACC,KAAK,CAAC;;QAExB,CAAC;QACDe,OAAO,EAAE,SAAAA,CAAST,QAAQ;UACxB,IAAI;YACFX,IAAI,CAACgB,MAAM,CAACK,cAAc,CAACX,MAAM,EAAEC,QAAQ,CAAC;WAC7C,CAAC,OAAON,KAAK,EAAE;YACdD,aAAa,CAACC,KAAK,CAAC;;QAExB;OACD;MACDiB,KAAK,EAAE,SAAAA,CAAA;QACL,IAAI;UACFtB,IAAI,CAACgB,MAAM,CAACO,MAAM,CAACb,MAAM,CAAC;SAC3B,CAAC,OAAOL,KAAK,EAAE;UACdD,aAAa,CAACC,KAAK,CAAC;;MAExB,CAAC;MACDmB,GAAG,EAAE;QACHT,KAAK,EAAE,SAAAA,CAASJ,QAAQ;UACtB,IAAI;YACFX,IAAI,CAACgB,MAAM,CAACS,cAAc,CAACf,MAAM,EAAEC,QAAQ,CAAC;WAC7C,CAAC,OAAON,KAAK,EAAE;YACdD,aAAa,CAACC,KAAK,CAAC;;QAExB;;;GAGL;AACH;AAEAF,UAAU,CAACuB,UAAU,EAAE;AAEvBzB,QAAQ,CAAC,gBAAgignoreList":[]}]}